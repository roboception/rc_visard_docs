
.. include:: global_rst.glb

.. _sect-itempick:

ItemPick and BoxPick
====================

.. index:: ! ItemPick
   single: bin picking
   single: grasp computation

.. index:: ! BoxPick

Introduction
------------

.. Short description and functionalities

The ItemPick and BoxPick components are optional on-board components of the |rc_xxx|.

.. Note::

   The components are optional and require separate ItemPick or BoxPick :ref:`licenses<sect-updating-license>`
   :latex:`(Section \ref{maintenance:sect-updating-license})` to be purchased.

The components provide out-of-the-box perception solutions for robotic pick-and-place
applications. ItemPick targets the detection of flat surfaces of unknown objects for picking
with a suction gripper. BoxPick detects rectangular surfaces and determines their position,
orientation and size for grasping. The interface of both components is very similar. Therefore
both components are described together in this chapter.

In addition, both components offer:

- A dedicated page on the |rc_xxx| :ref:`sect-web-gui`:latex:`\:(Section \ref{installation:sect-web-gui})`
  for easy setup, configuration, testing, and application tuning.
- The definition of regions of interest to select relevant volumes in the scene 
  (see :ref:`sect-roi`:latex:`, Section \ref{roi:sect-roi}`).
- A load carrier detection functionality for bin-picking applications 
  (see :ref:`sect-loadcarrier`:latex:`, Section \ref{loadcarrier:sect-loadcarrier}`),
  to provide grasps for items inside a bin only.
- The definition of compartments inside a load carrier to provide grasps
  for specific volumes of the bin only.
- Support for static and robot-mounted cameras and
  optional integration with the :doc:`handeye_calibration`
  :latex:`(Section \ref{handeye_calibration:sect-handeye-calibration})` component,
  to provide grasps in the user-configured external reference frame.
- A quality value associated to each suggested grasp and related to the flatness of the grasping surface.
- Sorting of grasps according to gravity and size so that items on top of a pile are grasped first.

.. Note::

  In this chapter, cluster and surface are used as synonyms and identify a set of
  points (or pixels) with defined geometrical properties.


.. _sect-itempick-detect-items:

Detection of items (BoxPick)
----------------------------

.. index::
   single: BoxPick; item model

The BoxPick component supports the detection of multiple ``item_models`` of
``type`` ``RECTANGLE``.
Each item model is defined by its minimum and maximum size, with the
minimum dimensions strictly smaller than the maximum dimensions.
The dimensions should be given fairly accurately to avoid misdetections, 
while still considering a certain tolerance to account for possible production variations 
and measurement inaccuracies. 

Optionally, further information can be given to the BoxPick component:

- The ID of the load carrier which contains the items to be detected.
- A compartment inside the load carrier where to detect items.
- The ID of the region of interest where to search for the load carriers if a
  load carrier is set.
  Otherwise, the ID of the region of interest where to search for the items.
- The current robot pose in case the camera is mounted on the robot and 
  the chosen coordinate frame for the poses is ``external`` or the chosen 
  region of interest is defined in the external frame.

The detected ``item`` poses are given relative to the centers of the rectangles,
with the z axis pointing towards the camera.
Each detected item includes a ``uuid`` (Universally Unique Identifier) and the
``timestamp`` of the oldest image that was used to detect it.

.. _sect-itempick-compute-grasps:

Computation of grasps
---------------------

.. index::
   single: BoxPick; grasp
   single: ItemPick; grasp

The ItemPick and BoxPick components offer a service for computing grasps for
suction grippers. The gripper is defined by its suction surface length and width.

The ItemPick component identifies flat surfaces in the scene and supports
flexible and/or deformable items. The ``type`` of these ``item_models`` is
called ``UNKNOWN`` since they don't need to have a standard geometrical shape.
Optionally, the user can also specify the minimum and maximum size of the item.

For BoxPick, the grasps are computed on the detected rectangular ``items``
(see :ref:`sect-itempick-detect-items`:latex:`, Section \ref{itempick:sect-itempick-detect-items}`).

Optionally, further information can be given to the components in a grasp
computation request:

- The ID of the load carrier which contains the items to be grasped.
- A compartment inside the load carrier where to compute grasps.
  The ``load_carrier_compartment`` is a box whose ``pose`` is defined with respect
  to the load carrier reference frame.

.. _fig-itempick-compartment:
.. figure:: images/itempick_load_carrier_compartment.*
   :width: 100%
   :align: center

   Compartment inside a load carrier.

- The ID of the region of interest where to search for the load carriers if a
  load carrier is set.
  Otherwise, the ID of the region of interest where to compute grasps.
- Collision detection information: The ID of the gripper to enable collision checking and optionally
  a pre-grasp offset to define a pre-grasp position.
  The collision check requires a separate CollisionCheck 
  :ref:`license<sect-updating-license>`:latex:`\:(Section \ref{maintenance:sect-updating-license})`
  to be purchased. Details on collision
  checking are given below in :ref:`sect-itempick-collision-check-dep`:latex:`\:(Section \ref{itempick:sect-itempick-collision-check-dep})`.


A grasp provided by the ItemPick and BoxPick components represents the recommended
pose of the TCP (Tool Center Point) of the suction gripper.
The grasp ``type`` is always set to ``SUCTION``.
The computed grasp pose is the center of the biggest ellipse that can be inscribed in
each surface.
The grasp orientation is a right-handed coordinate system and is defined such
that its z axis is normal to the surface pointing inside the object at the grasp position and
its x axis is directed along the maximum elongation of the ellipse.

.. _fig-itempick-grasp-surface:
.. figure:: images/itempick_grasp_surface.png
   :width: 300 px
   :align: center

   Illustration of suction grasp with coordinate system and ellipse representing
   the maximum suction surface.

Each grasp includes the dimensions of the maximum suction surface available,
modelled as an ellipse of axes ``max_suction_surface_length`` and
``max_suction_surface_width``. The user is enabled to filter grasps by specifying
the minimum suction surface required by the suction device in use.

In the BoxPick component, the grasp position corresponds to the center of the detected
rectangle and the dimensions of the maximum suction surface available matches the estimated
rectangle dimensions. Detected rectangles with missing data or occlusions by other objects for more
than 15% of their surface do not get an associated grasp.

Each grasp also includes a ``quality`` value, which gives an
indication of the flatness of the grasping surface.
The ``quality`` value varies between 0 and 1, where higher numbers correspond to a
flatter reconstructed surface.

.. In case of multi-cup suction devices, the suction surface
.. is expected to cover all suction elements.

The grasp definition is complemented by a ``uuid`` (Universally Unique Identifier)
and the ``timestamp`` of the oldest image that was used to compute the grasp.

.. _sect-itempick-dependencies:

Interaction with other components
---------------------------------

Internally, the ItemPick and BoxPick components depend on, and interact with other on-board
components as listed below.

.. Note::
  All changes and configuration updates to these components will affect
  the performance of the ItemPick and BoxPick components.

.. For each load carrier detection and grasp computation, the ItemPick component
.. acquires datasets of synchronized images and estimates the gravity vector.
.. The data acquisition step normally takes between 500 ms and 600 ms
.. with "High" depth image quality.

.. _sect-itempick-stereo-camera-matching:

Stereo camera and Stereo matching
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The ItemPick and BoxPick components make internally use of the following data:

- Rectified images from the :doc:`stereo_camera` component
  (``rc_stereocamera``:latex:`, Section \ref{stereo_camera:sect-stereo-camera}`);

- Disparity, error, and confidence images from the :doc:`stereo_matching` component
  (``rc_stereomatching``:latex:`, Section \ref{stereo_matching:sect-stereo-matching}`).

All processed images are guaranteed to be captured after the component trigger time.

.. _sect-itempick-dynamics:

Estimation of gravity vector
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

For each load carrier detection and grasp computation, the components
estimate the gravity vector by subscribing to the |rc_visard|'s IMU data stream.

.. Note::
   The gravity vector is estimated from linear acceleration readings from the on-board IMU.
   For this reason, the ItemPick and BoxPick components require the |rc_visard| to remain
   still while the gravity vector is being estimated.

.. _sect-itempick-iocontrol-dep:

IO and Projector Control
^^^^^^^^^^^^^^^^^^^^^^^^

In case the |rc_xxx| is used in conjunction with an external random dot projector and
the :doc:`iocontrol` component (``rc_iocontrol``:latex:`, Section \ref{iocontrol:sect-iocontrol}`),
it is recommended to connect the projector to GPIO Out 1 and set
the stereo-camera component's acquisition mode to ``SingleFrameOut1``
(see :ref:`Stereo matching parameters<sect-disp-image-parameters>`:latex:`, Section \ref{stereo_matching:sect-disp-image-parameters}`), so that
on each image acquisition trigger an image with and without projector pattern is acquired.

Alternatively, the output mode for the GPIO output in use should be set to ``ExposureAlternateActive``
(see :ref:`sect-iocontrol-params`:latex:`, Section \ref{iocontrol:sect-iocontrol-params}`).

In either case,
the *Auto Exposure Mode* ``exp_auto_mode`` should be set to ``AdaptiveOut1`` to optimize the exposure
of both images (see :ref:`Stereo camera parameters<sect-cam-params>`:latex:`, Section \ref{stereo_camera:sect-cam-params}`).

.. _sect-itempick-hand-eye-dep:

Hand-eye calibration
^^^^^^^^^^^^^^^^^^^^

In case the camera has been calibrated to a robot, the ItemPick and BoxPick components
can automatically provide poses in the robot coordinate frame.
For the ItemPick and BoxPick nodes' :ref:`sect-itempick-services`:latex:`\:(Section \ref{itempick:sect-itempick-services})`, the frame of the
output poses can be controlled with the ``pose_frame`` argument.

Two different ``pose_frame`` values can be chosen:

1. **Camera frame** (``camera``).
   All poses provided by the components are in the camera frame,
   and no prior knowledge about the pose of the camera in the environment is required.
   This means that the configured regions of interest and load carriers move with the camera.
   It is the user's responsibility to update the configured poses
   if the camera frame moves (e.g. with a robot-mounted camera).

2. **External frame** (``external``).
   All poses provided by the components are in the external frame,
   configured by the user during the hand-eye calibration process.
   The component relies on the on-board 
   :doc:`Hand-eye calibration component<handeye_calibration>`:latex:`\:(Section \ref{handeye_calibration:sect-handeye-calibration})`
   to retrieve the sensor mounting (static or robot mounted) and
   the hand-eye transformation.
   If the mounting is static, no further information is needed.
   If the sensor is robot-mounted, the ``robot_pose`` is required
   to transform poses to and from the ``external`` frame.

.. Note::
   If no hand-eye calibration is available, all ``pose_frame`` values should be set to ``camera``.

All ``pose_frame`` values that are not ``camera`` or ``external`` are rejected.


.. _sect-itempick-collision-check-dep:

CollisionCheck
^^^^^^^^^^^^^^

In case a CollisionCheck license is available, the collision checking can be easily enabled for
grasp computation of the ItemPick and BoxPick components by passing the ID of the used gripper and
optionally a pre-grasp offset to the 
``compute_grasps`` service call. The gripper has to be
defined in the CollisionCheck component
(see :ref:`sect-collisioncheck-gripper`:latex:`\:(Section \ref{collisioncheck:sect-collisioncheck-gripper})`)
and details about collision checking are given in :ref:`sect-collision-check-other-modules`:latex:`\:(Section \ref{collisioncheck:sect-collision-check-other-modules})`.

If collision checking is enabled, only grasps which are collision free will be returned. 
However, the visualization images on the *ItemPick* or *BoxPick*
tab of the |webgui| also show colliding grasp points as black ellipses.

The CollisionCheck module's run-time parameters affect the collision detection as described in
:ref:`CollisionCheck Parameters<sect-collisioncheck-parameters>`:latex:`\:(Section \ref{collisioncheck:sect-collisioncheck-parameters})`.

.. _sect-itempick-parameters:

Parameters
----------

.. index::
   single: BoxPick; parameters
   single: ItemPick; parameters

The ItemPick and BoxPick components are called ``rc_itempick`` and ``rc_boxpick``
in the |rest-api| and are represented by the *ItemPick* and *BoxPick* pages in the *Modules* tab of the
:ref:`Web GUI<sect-web-gui>`:latex:`\:(Section \ref{installation:sect-web-gui})`. 
The user can explore and configure the ``rc_itempick`` and ``rc_boxpick``
component's run-time parameters, e.g. for development and testing, using the |webgui| or the
:doc:`rest_api`:latex:`\:(Section \ref{rest_api:sect-rest-api})`.

Parameter overview
^^^^^^^^^^^^^^^^^^

.. include:: _gen/nodes/params/rc_itempick_split.txt

Description of run-time parameters
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Each run-time parameter is represented by a row on the |webgui|'s *ItemPick* or *BoxPick* page in the *Modules* tab.
The name in the |webgui| is given in brackets behind the parameter name and the parameters are
listed in the order they appear in the |webgui|:

``max_grasps`` (*Maximum Grasps*)
    sets the maximum number of provided grasps.

``load_carrier_model_tolerance`` (*Model Tolerance*)
    see :ref:`Parameters of the load carrier functionality<sect-loadcarrier-parameters>`:latex:`\:(Section \ref{loadcarrier:sect-loadcarrier-parameters})`.

``load_carrier_crop_distance`` (*Crop Distance*)
    see :ref:`Parameters of the load carrier functionality<sect-loadcarrier-parameters>`:latex:`\:(Section \ref{loadcarrier:sect-loadcarrier-parameters})`.

``cluster_max_dimension`` (**Only for ItemPick**, *Cluster Maximum Dimension*)
    sets the diameter of the largest circle enclosing each 
    cluster in meters. Clusters larger than this value are filtered out 
    before grasp computation.

``cluster_max_curvature`` (*Cluster Maximum Curvature*)
    is the maximum curvature allowed within one cluster. The smaller this value, the more clusters will be split apart.

``clustering_patch_size`` (**Only for ItemPick**, *Patch Size*)
    is the size of the square patches the depth map is subdivided into during the first clustering step in pixels.

``clustering_discontinuity_factor`` (*Discontinuity Factor*)
    is the factor used to discriminate depth discontinuities within a patch. The smaller this value, the more clusters will be split apart.

``clustering_max_surface_rmse`` (*Maximum Surface RMSE*)
    is the maximum root-mean-square error (RMSE) in meters of points belonging to a surface.

.. _sect-itempick-status-values:

Status values
-------------

.. index::
   single: BoxPick; status
   single: ItemPick; status

The ``rc_itempick`` and ``rc_boxpick`` components report the following status values:

.. tabularcolumns:: |l|L|
.. csv-table:: The ``rc_itempick`` and ``rc_boxpick`` components status values
	:header:  Name, Description

	"``data_acquisition_time``","Time in seconds required by the last active service to acquire images. Standard values are between 0.5 s and 0.6 s with High depth image quality."
	"``grasp_computation_time``","Processing time of the last grasp computation in seconds"
	"``last_timestamp_processed``","The timestamp of the last processed dataset"
	"``load_carrier_detection_time``","Processing time of the last load carrier detection in seconds"
	"``state``","The current state of the rc_itempick and rc_boxpick node"

The reported ``state`` can take one of the following values.

.. tabularcolumns:: |l|l|
.. _tab-itempick-states:
.. csv-table:: Possible states of the ItemPick and BoxPick components
	:header:  State name, Description

	"IDLE", "The component is idle."
	"RUNNING", "The component is running and ready for load carrier detection and grasp computation."
	"FATAL", "A fatal error has occurred."

.. _sect-itempick-services:

Services
--------

.. index::
   single: BoxPick; services
   single: ItemPick; services

The user can explore and call the ``rc_itempick`` and ``rc_boxpick`` component's services,
e.g. for development and testing, using the
:doc:`rest_api`:latex:`\:(Section \ref{rest_api:sect-rest-api})` or
the |rc_xxx|
:ref:`sect-web-gui`:latex:`\:(Section \ref{installation:sect-web-gui})`.

Each service response contains a ``return_code``,
which consists of a ``value`` plus an optional ``message``.
A successful service returns with a ``return_code`` value of ``0``.
Negative ``return_code`` values indicate that the service failed.
Positive ``return_code`` values indicate that the service succeeded with additional information.
The smaller value is selected in case a service has multiple ``return_code`` values,
but all messages are appended in the ``return_code`` message.

The following table contains a list of common codes:

.. tabularcolumns:: |c|L|
.. _tab-itempick-return-codes:
.. csv-table:: Return codes of the ItemPick and BoxPick services
    :header:  Code, Description

    "0",    "Success"
    "-1",   "An invalid argument was provided"
    "-4",   "Data acquisition took longer than the maximum allowed time of 5.0 seconds"
    "-10",  "New element could not be added as the maximum storage capacity of load carriers or regions of interest has been exceeded"
    "-200", "Fatal internal error"    
    "-301", "More than one item model of type ``UNKNOWN`` provided to the ``compute_grasps`` service"
    "-302", "More than one load carrier provided to the ``detect_load_carriers`` or ``detect_filling_level`` services, but only one is supported"
    "10",   "The maximum storage capacity of load carriers or regions of interest has been reached"
    "11",   "An existent persistent model was overwritten by the call to ``set_load_carrier`` or ``set_region_of_interest``"
    "100",  "The requested load carriers were not detected in the scene"
    "101",  "No valid surfaces or grasps were found in the scene"
    "102",  "The detected load carrier is empty"
    "103",  "All computed grasps are in collision with the load carrier"
    "200",  "The component is in state ``IDLE``"
    "300",  "A valid ``robot_pose`` was provided as argument but it is not required"
    "400",  "No ``item_models`` were provided to the ``compute_grasps`` service request" 


The ItemPick and BoxPick components offer the following services.

.. _expl-itempick-srv-start:

``start``
^^^^^^^^^

   Starts the component. If the command is accepted, the component moves to state ``RUNNING``.
   The ``current_state`` value in the service response may differ from ``RUNNING`` if
   the state transition is still in process when the service returns.

   .. include:: _gen/nodes/services/rc_itempick_start.txt

.. _expl-itempick-srv-stop:

``stop``
^^^^^^^^

   Stops the component. If the command is accepted, the component moves to state ``IDLE``.
   The ``current_state`` value in the service response may differ from ``IDLE`` if
   the state transition is still in process when the service returns.

   .. include:: _gen/nodes/services/rc_itempick_stop.txt

.. _expl-itempick-srv-set-roi:

``set_region_of_interest``
^^^^^^^^^^^^^^^^^^^^^^^^^^

   see :ref:`expl-roi-srv-set-roi`:latex:`\:(Section \ref{roi:expl-roi-srv-set-roi})`.

.. _expl-itempick-srv-get-roi:

``get_regions_of_interest``
^^^^^^^^^^^^^^^^^^^^^^^^^^^

   see :ref:`expl-roi-srv-get-roi`:latex:`\:(Section \ref{roi:expl-roi-srv-get-roi})`.

.. _expl-itempick-srv-delete-roi:

``delete_regions_of_interest``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  see :ref:`expl-roi-srv-delete-roi`:latex:`\:(Section \ref{roi:expl-roi-srv-delete-roi})`.

.. _expl-itempick-srv-set-lc:

``set_load_carrier``
^^^^^^^^^^^^^^^^^^^^

   see :ref:`expl-loadcarrier-srv-set-lc`:latex:`\:(Section \ref{loadcarrier:expl-loadcarrier-srv-set-lc})`.
   
.. _expl-itempick-srv-get-lc:

``get_load_carriers``
^^^^^^^^^^^^^^^^^^^^^

   see :ref:`expl-loadcarrier-srv-get-lc`:latex:`\:(Section \ref{loadcarrier:expl-loadcarrier-srv-get-lc})`.

.. _expl-itempick-srv-delete-lc:

``delete_load_carriers``
^^^^^^^^^^^^^^^^^^^^^^^^

   see :ref:`expl-loadcarrier-srv-delete-lc`:latex:`\:(Section \ref{loadcarrier:expl-loadcarrier-srv-delete-lc})`.

.. _expl-itempick-srv-detect-lc:

``detect_load_carriers``
^^^^^^^^^^^^^^^^^^^^^^^^

   see :ref:`expl-loadcarrier-srv-detect-lc`:latex:`\:(Section \ref{loadcarrier:expl-loadcarrier-srv-detect-lc})`.


.. _expl-itempick-srv-detect-filling-level:

``detect_filling_level``
^^^^^^^^^^^^^^^^^^^^^^^^

   see :ref:`expl-loadcarrier-srv-detect-filling-level`:latex:`\:(Section \ref{loadcarrier:expl-loadcarrier-srv-detect-filling-level})`.


.. _expl-itempick-srv-detect-items:

``detect_items`` (BoxPick only)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

   Triggers the detection of rectangles as described in 
   :ref:`sect-itempick-detect-items`:latex:`\:(Section \ref{itempick:sect-itempick-detect-items})`.

   **Request:**

    .. include:: _gen/nodes/services/rc_boxpick_detect_items_request.txt

    Required arguments:

      ``pose_frame``: see :ref:`sect-itempick-hand-eye-dep`:latex:`\:(Section \ref{itempick:sect-itempick-hand-eye-dep})`.

      ``item_models``: list of rectangles with minimum and maximum size, with the
      minimum dimensions strictly smaller than the maximum dimensions.
      The dimensions should be given fairly accurately to avoid misdetections, 
      while still considering a certain tolerance to account for possible production variations 
      and measurement inaccuracies. 

    Potentially required arguments:

      ``robot_pose``: see :ref:`sect-itempick-hand-eye-dep`:latex:`\:(Section \ref{itempick:sect-itempick-hand-eye-dep})`.

    Optional arguments:

      ``load_carrier_id``: ID of the load carrier which contains the items to be detected.

      ``load_carrier_compartment``: compartment inside the load carrier where to detect items.

      ``region_of_interest_id``: if ``load_carrier_id`` is set,
      ID of the region of interest where to search for the load carriers.
      Otherwise, ID of the region of interest where to search for the items.

   **Response:**

    .. include:: _gen/nodes/services/rc_boxpick_detect_items_response.txt

    ``load_carriers``: list of detected load carriers.

    ``items``: list of detected rectangles.

    ``timestamp``: timestamp of the image set the detection ran on.

    ``return_code``: holds possible warnings or error codes and messages.

.. _expl-itempick-srv-compute-grasps:

``compute_grasps`` (for ItemPick)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

   Triggers the computation of grasping poses for a suction device as described in 
   :ref:`sect-itempick-compute-grasps`:latex:`\:(Section \ref{itempick:sect-itempick-compute-grasps})`.

   **Request:**

     .. include:: _gen/nodes/services/rc_itempick_compute_grasps_request.txt

     Required arguments:

       ``pose_frame``: see :ref:`sect-itempick-hand-eye-dep`:latex:`\:(Section \ref{itempick:sect-itempick-hand-eye-dep})`.

       ``suction_surface_length``: length of the suction device grasping surface.

       ``suction_surface_width``: width of the suction device grasping surface.

     Potentially required arguments:

       ``robot_pose``: see :ref:`sect-itempick-hand-eye-dep`:latex:`\:(Section \ref{itempick:sect-itempick-hand-eye-dep})`.

     Optional arguments:

       ``load_carrier_id``: ID of the load carrier which contains the items to be grasped.

       ``load_carrier_compartment``: compartment inside the load carrier where to compute grasps.

       ``region_of_interest_id``: if ``load_carrier_id`` is set,
       ID of the region of interest where to search for the load carriers.
       Otherwise, ID of the region of interest where to compute grasps.

       ``item_models``: list of unknown items with minimum and maximum dimensions, with the
       minimum dimensions strictly smaller than the maximum dimensions.
       Only one ``item_model`` of type ``UNKNOWN`` is currently supported.

       ``collision_detection``: see :ref:`sect-collision-check-other-modules`:latex:`\:(Section \ref{collisioncheck:sect-collision-check-other-modules})`.
       The collision check requires a separate CollisionCheck :ref:`license<sect-updating-license>`:latex:`\:(Section \ref{maintenance:sect-updating-license})` to be purchased.

   **Response:**

     .. include:: _gen/nodes/services/rc_itempick_compute_grasps_response.txt

     ``load_carriers``: list of detected load carriers.

     ``grasps``: sorted list of suction grasps.

     ``timestamp``: timestamp of the image set the detection ran on.

     ``return_code``: holds possible warnings or error codes and messages.


.. _expl-itempick-srv-compute-grasps-boxpick:

``compute_grasps`` (for BoxPick)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

   Triggers the detection of rectangles and the computation of grasping poses
   for the detected rectangles as described in 
   :ref:`sect-itempick-compute-grasps`:latex:`\:(Section \ref{itempick:sect-itempick-compute-grasps})`.

   **Request:**

     .. include:: _gen/nodes/services/rc_boxpick_compute_grasps_request.txt

     Required arguments:

       ``pose_frame``: see :ref:`sect-itempick-hand-eye-dep`:latex:`\:(Section \ref{itempick:sect-itempick-hand-eye-dep})`.

       ``item_models``: list of rectangles with minimum and maximum size, with the
       minimum dimensions strictly smaller than the maximum dimensions.
       The dimensions should be given fairly accurately to avoid misdetections, 
       while still considering a certain tolerance to account for possible production variations 
       and measurement inaccuracies. 

       ``suction_surface_length``: length of the suction device grasping surface.

       ``suction_surface_width``: width of the suction device grasping surface.

     Potentially required arguments:

       ``robot_pose``: see :ref:`sect-itempick-hand-eye-dep`:latex:`\:(Section \ref{itempick:sect-itempick-hand-eye-dep})`.

     Optional arguments:

       ``load_carrier_id``: ID of the load carrier which contains the items to be grasped.

       ``load_carrier_compartment``: compartment inside the load carrier where to compute grasps.

       ``region_of_interest_id``: if ``load_carrier_id`` is set,
       ID of the region of interest where to search for the load carriers.
       Otherwise, ID of the region of interest where to compute grasps.

       ``collision_detection``: see :ref:`sect-collision-check-other-modules`:latex:`\:(Section \ref{collisioncheck:sect-collision-check-other-modules})`.
       The collision check requires a separate CollisionCheck :ref:`license<sect-updating-license>`
       :latex:`(Section \ref{maintenance:sect-updating-license})` to be purchased.

   **Response:**

     .. include:: _gen/nodes/services/rc_boxpick_compute_grasps_response.txt

     ``load_carriers``: list of detected load carriers.

     ``items``: sorted list of suction grasps on the detected rectangles.

     ``grasps``: sorted list of suction grasps.

     ``timestamp``: timestamp of the image set the detection ran on.

     ``return_code``: holds possible warnings or error codes and messages.


.. _expl-itempick-srv-save-params:

``save_parameters``
^^^^^^^^^^^^^^^^^^^

   This service saves the currently set parameters persistently.
   Thereby, the same parameters will still apply after a reboot of
   the |rc_xxx|.
   The node parameters are not persistent over firmware updates and rollbacks.

   .. include:: _gen/nodes/services/rc_itempick_save_parameters.txt

.. _expl-itempick-srv-reset-params:

``reset_defaults``
^^^^^^^^^^^^^^^^^^

   This service resets all parameters of the component to its default values,
   as listed in above table.
   The reset does not apply to regions of interest and load carriers.

   .. include:: _gen/nodes/services/rc_itempick_reset_defaults.txt
