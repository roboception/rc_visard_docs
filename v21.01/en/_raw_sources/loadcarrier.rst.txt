
.. include:: global_rst.glb

.. _sect-loadcarrier:

Load carrier functionality
==========================

.. index:: ! load carrier
   single: load carrier detection
   pair: BoxPick; load carrier
   pair: ItemPick; load carrier
   pair: SilhouetteMatch; load carrier

.. only:: rc_cube

   .. index::
      single: CADMatch; load carrier

Introduction
------------

The load carrier functionality is contained in an internal load carrier component
and can only be used through the software components providing a load carrier functionality.

.. only:: rc_visard

   The load carrier functionality is provided by the :ref:`sect-itempick`:latex:`\:(Section \ref{itempick:sect-itempick})` and 
   :ref:`sect-silhouettematch`:latex:`\:(Section \ref{silhouettematch:sect-silhouettematch})` modules.

.. only:: rc_cube

   The load carrier functionality is provided by the :ref:`sect-itempick`:latex:`\:(Section \ref{itempick:sect-itempick})`, 
   :ref:`sect-silhouettematch`:latex:`\:(Section \ref{silhouettematch:sect-silhouettematch})` and
   :ref:`sect-cadmatch`:latex:`\:(Section \ref{cadmatch:sect-cadmatch})` modules.

Load Carrier
------------

A load carrier (bin) is a container with four walls, a floor and a rectangular rim,
which can contain objects. 

A load carrier is defined by its ``outer_dimensions`` and ``inner_dimensions``.
The maximum ``outer_dimensions`` are 2.0 meters in every dimension.

.. Note::
  Typically, outer and inner dimensions of a load carrier are available in the
  specifications of the load carrier manufacturer.

.. The ``outer_dimensions`` identify the load carrier outer box and
.. are the dimensions of the load carrier bounding box.
.. The ``inner_dimensions`` identify the load carrier inner box and
.. are the dimension of the maximum box that can be completely
.. contained within the load carrier.
.. While the ``rim_thickness`` value is optionally used for detecting the load carrier,
.. the ``inner_dimensions`` are required to filter the load carrier
.. and keep only its content.

The |rcxxx| can persistently store up to 50 different
load carrier models, each one identified by a different ``id``.
The configuration of a load carrier model is normally performed offline,
during the set up the desired application.
This can be done via the :doc:`rest_api`:latex:`\:(Section \ref{rest_api:sect-rest-api})` or in the |rcxxx| |webgui|.

.. Note::
  The configured load carrier models
  are persistent even over firmware updates and rollbacks.

.. _sect-loadcarrier-detect-lc:

Detection of load carriers
--------------------------

The load carrier detection algorithm is based on the detection of the load carrier
rectangular rim. By default, the rectangular ``rim_thickness`` is computed from the
outer and inner dimensions. As an alternative, its value can also
be explicitly specified by the user.

The origin of a detected load carrier is in the center of the load carrier
outer box and its z axis is perpendicular to the load carrier floor.
The detection functionality also determines if the detected load carrier is ``overfilled``.

.. _fig-loadcarrier-load-carrier:
.. figure:: images/itempick_load_carrier_reference_rim_sidebyside.*
   :width: 100%
   :align: center

   Load carrier models and reference frame.

The user can optionally specify a prior for the load carrier ``pose``.
The detected load carrier pose is guaranteed to have the minimum rotation
with respect to the load carrier prior pose.
If no prior is specified, the algorithm searches for a load carrier whose floor
is perpendicular to the estimated gravity vector.

.. Because of the symmetry of the load carrier model, there is an ambiguity
.. in the definition of the x axis sense.
.. :numref:`fig-loadcarrier-load-carrier-orientation` visualizes how the sense of
.. the load carrier x axis is defined for rectangular load carriers.
..
.. .. _fig-loadcarrier-load-carrier-orientation:
.. .. figure:: images/itempick_load_carrier_orientation.png
..    :width: 600 px
..    :align: center
..
..    Disambiguation of the coordinate system for a rectangular load carrier.
..    All load carrier are viewed from the left eye of the |rc_visard|.
..    The dashed line represents the orientation where the x axis flips
..    (-45 degrees on the image plane).

.. _sect-loadcarrier-detect-filling-level:

Detection of filling level
--------------------------

.. index::
   pair: BoxPick; filling level
   pair: ItemPick; filling level
   pair: SilhouetteMatch; filling level

.. only:: rc_cube

   .. index::
      single: CADMatch; filling level

The load carrier functionality contains the ``detect_filling_level``
service to compute the filling level of a detected load carrier.

The load carrier is subdivided in a configurable number of cells in a 2D grid.
The maximum number of cells is 10x10.
For each cell, the following values are reported:

- ``level_in_percent``: minimum, maximum and mean cell filling level in percent
  from the load carrier floor.
  These values can be larger than 100% if the cell is overfilled.
- ``level_free_in_meters``: minimum, maximum and mean cell free level in meters
  from the load carrier rim. These values can be negative if the cell is overfilled.
- ``cell_size``: dimensions of the 2D cell in meters.
- ``cell_position``: position of the cell center in meters
  (either in ``camera`` or ``external`` frame, see :ref:`sect-loadcarrier-hand-eye-dep`:latex:`, Section \ref{loadcarrier:sect-loadcarrier-hand-eye-dep}`).
  The z-coordinate is on the level of the load carrier rim.
- ``coverage``: represents the proportion of valid pixels in this cell.
  It varies between 0 and 1 with steps of 0.1.
  A low coverage indicates that the cell contains several missing data
  (i.e. only a few points were actually measured in this cell).

These values are also calculated for the whole load carrier itself.
If no cell subdivision is specified, only the overall filling level is computed.

.. _fig-loadcarrier-lc-filling-level:
.. figure:: images/itempick_lc_filling_level.png
   :width: 100%
   :align: center

   Visualizations of the load carrier filling level: overall filling level without
   grid (left), 4x3 grid (center), 8x8 grid (right).
   The load carrier content is shown in a green gradient from white
   (on the load carrier floor) to dark green.
   The overfilled regions are visualized in red. Numbers indicate cell IDs.

.. _sect-loadcarrier-dependencies:

Interaction with other components
---------------------------------

Internally, the load carrier functionality depends on, and interacts with other on-board
components as listed below.

.. Note::
  All changes and configuration updates to these components will affect
  the performance of the load carrier component.

.. For each load carrier detection, the load carrier component
.. acquires datasets of synchronized images and estimates the gravity vector.
.. The data acquisition step normally takes between 500 ms and 600 ms
.. with "High" depth image quality.

.. _sect-loadcarrier-stereo-camera-matching:

Stereo camera and Stereo matching
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The load carrier component makes internally use of the following data:

- Rectified images from the :doc:`stereo_camera` component
  (``rc_stereocamera``:latex:`, Section \ref{stereo_camera:sect-stereo-camera}`);

- Disparity, error, and confidence images from the :doc:`stereo_matching` component
  (``rc_stereomatching``:latex:`, Section \ref{stereo_matching:sect-stereo-matching}`).

All processed images are guaranteed to be captured after the component trigger time.

.. _sect-loadcarrier-dynamics:

Estimation of gravity vector
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

For each load carrier detection, the component
estimates the gravity vector by subscribing to the |rc_visard|'s IMU data stream.

.. Note::
   The gravity vector is estimated from linear acceleration readings from the on-board IMU.
   For this reason, the load carrier component requires the |rc_visard| to remain
   still while the gravity vector is being estimated.

.. _sect-loadcarrier-iocontrol-dep:

IO and Projector Control
^^^^^^^^^^^^^^^^^^^^^^^^

In case the |rc_xxx| is used in conjunction with an external random dot 
projector and the :doc:`iocontrol` component (``rc_iocontrol``:latex:`, 
Section \ref{iocontrol:sect-iocontrol}`), it is recommended to connect 
the projector to GPIO Out 1 and set the stereo-camera component's 
acquisition mode to ``SingleFrameOut1`` (see :ref:`Stereo matching 
parameters<sect-disp-image-parameters>`:latex:`, Section 
\ref{stereo_matching:sect-disp-image-parameters})`, so that on each 
image acquisition trigger an image with and without projector pattern is 
acquired.

Alternatively, the output mode for the GPIO output in use should be set 
to ``ExposureAlternateActive`` (see :ref:`sect-iocontrol-params`:latex:`,
Section \ref{iocontrol:sect-iocontrol-params}`).

In either case,
the *Auto Exposure Mode* ``exp_auto_mode`` should be set to ``AdaptiveOut1`` to optimize the exposure
of both images (see :ref:`Stereo camera parameters<sect-cam-params>`:latex:`, Section \ref{stereo_camera:sect-cam-params})`.

No additional changes are required to use the load carrier component
in combination with a random dot projector.

.. _sect-loadcarrier-hand-eye-dep:

Hand-eye calibration
^^^^^^^^^^^^^^^^^^^^

In case the camera has been calibrated to a robot, the loadcarrier component
can automatically provide poses in the robot coordinate frame.
For the loadcarrier nodes' :ref:`sect-loadcarrier-services`:latex:`\:(Section \ref{loadcarrier:sect-loadcarrier-services})`, the frame of the
output poses can be controlled with the ``pose_frame`` argument.

Two different ``pose_frame`` values can be chosen:

1. **Camera frame** (``camera``).
   All poses provided by the components are in the camera frame,
   and no prior knowledge about the pose of the camera in the environment is required.
   This means that the configured load carriers move with the camera.
   It is the user's responsibility to update the configured poses
   if the camera frame moves (e.g. with a robot-mounted camera).

2. **External frame** (``external``).
   All poses provided by the components are in the external frame,
   configured by the user during the hand-eye calibration process.
   The component relies on the on-board 
   :doc:`Hand-eye calibration component<handeye_calibration>`:latex:`\:(Section \ref{handeye_calibration:sect-handeye-calibration})`
   to retrieve the sensor mounting (static or robot mounted) and
   the hand-eye transformation.
   If the mounting is static, no further information is needed.
   If the sensor is robot-mounted, the ``robot_pose`` is required
   to transform poses to and from the ``external`` frame.

.. Note::
   If no hand-eye calibration is available, all ``pose_frame`` values should be set to ``camera``.

All ``pose_frame`` values that are not ``camera`` or ``external`` are rejected.

.. _sect-loadcarrier-parameters:

Parameters
----------

.. index::
   single: load carrier; parameters

The load carrier functionality is used internally by several other components and their parameters and
services are provided through these nodes. They can also be used in the
:ref:`Web GUI<sect-web-gui>`:latex:`\:(Section \ref{webgui:sect-web-gui})` on the page of the
corresponding module. 
The user can explore and configure the load carrier
component's run-time parameters, e.g. for development and testing, using the corresponding module page
in the |webgui| or the
:doc:`rest_api`:latex:`\:(Section \ref{rest_api:sect-rest-api})`.

Parameter overview
^^^^^^^^^^^^^^^^^^

.. include:: _gen/nodes/params/rc_load_carrier.txt

Description of run-time parameters
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Each run-time parameter is represented by a row on the Settings section of the |webgui|'s module page 
in the subsection *Load Carrier Detection Parameters*.
The name in the |webgui| is given in brackets behind the parameter name and the parameters are
listed in the order they appear in the |webgui|:

.. _expl-loadcarrier-load-carrier-model-tolerance:

``load_carrier_model_tolerance`` (*Model Tolerance*)
''''''''''''''''''''''''''''''''''''''''''''''''''''
    indicates how much the estimated load carrier dimensions are allowed to differ from the load carrier model dimensions in meters.

.. _expl-loadcarrier-load-carrier-crop-distance:

``load_carrier_crop_distance`` (*Crop Distance*)
''''''''''''''''''''''''''''''''''''''''''''''''
    sets the safety margin in meters by which the load carrier's inner dimensions are
    reduced to define the region of interest for detection.

.. _sect-loadcarrier-services:

Services
--------

.. index::
   single: load carrier; services

The user can explore and call the load carrier component's services,
e.g. for development and testing, using the
:doc:`rest_api`:latex:`\:(Section \ref{rest_api:sect-rest-api})` or
the |rc_xxx|
:ref:`sect-web-gui`:latex:`\:(Section \ref{webgui:sect-web-gui})`
on the page of the module offering the load carrier functionality.

Each service response contains a ``return_code``,
which consists of a ``value`` plus an optional ``message``.
A successful service returns with a ``return_code`` value of ``0``.
Negative ``return_code`` values indicate that the service failed.
Positive ``return_code`` values indicate that the service succeeded with additional information.
The smaller value is selected in case a service has multiple ``return_code`` values,
but all messages are appended in the ``return_code`` message.

The following table contains a list of common codes:

.. tabularcolumns:: |c|L|
.. _tab-loadcarrier-return-codes:
.. csv-table:: Return codes of the load carrier services
    :header:  Code, Description

    "0",    "Success"
    "-1",   "An invalid argument was provided"
    "-4",   "Data acquisition took longer than the maximum allowed time of 5.0 seconds"
    "-10",  "New element could not be added as the maximum storage capacity of load carriers has been exceeded"
    "-302", "More than one load carrier provided to the ``detect_load_carriers`` or ``detect_filling_level`` services, but only one is supported"
    "10",   "The maximum storage capacity of load carriers has been reached"
    "11",  "An existent persistent model was overwritten by the call to ``set_load_carrier``"
    "100",  "The requested load carriers were not detected in the scene"
    "102",  "The detected load carrier is empty"
    "300",  "A valid ``robot_pose`` was provided as argument but it is not required"
    

All software components providing the load carrier functionality offer the following services.

.. _expl-loadcarrier-srv-set-lc:

``set_load_carrier``
^^^^^^^^^^^^^^^^^^^^

   Persistently stores a load carrier on the |rc_xxx|.
   All configured load carriers are persistent over firmware updates and rollbacks.

   .. include:: _gen/nodes/services/rc_itempick_set_load_carrier_request.txt

   Details for the definition of the ``load_carrier`` type are given in 
   :ref:`sect-loadcarrier-detect-lc`:latex:`\:(Section \ref{loadcarrier:sect-loadcarrier-detect-lc})`.

   .. include:: _gen/nodes/services/rc_itempick_set_load_carrier_response.txt

.. _expl-loadcarrier-srv-get-lc:

``get_load_carriers``
^^^^^^^^^^^^^^^^^^^^^

   Returns the configured load carriers with the requested ``load_carrier_ids``.
   If no ``load_carrier_ids`` are provided, all configured load carriers are returned.

   .. include:: _gen/nodes/services/rc_itempick_get_load_carriers.txt

.. _expl-loadcarrier-srv-delete-lc:

``delete_load_carriers``
^^^^^^^^^^^^^^^^^^^^^^^^

   Deletes the configured load carriers with the requested ``load_carrier_ids``.
   All load carriers to be deleted must be explicitly stated in ``load_carrier_ids``.

   .. include:: _gen/nodes/services/rc_itempick_delete_load_carriers.txt

.. _expl-loadcarrier-srv-detect-lc:

``detect_load_carriers``
^^^^^^^^^^^^^^^^^^^^^^^^

   Triggers a load carrier detection as described in 
   :ref:`sect-loadcarrier-detect-lc`:latex:`\:(Section \ref{loadcarrier:sect-loadcarrier-detect-lc})`.

   **Request:**

    .. include:: _gen/nodes/services/rc_itempick_detect_load_carriers_request.txt

    Required arguments:

      ``pose_frame``: see :ref:`sect-loadcarrier-hand-eye-dep`:latex:`\:(Section \ref{loadcarrier:sect-loadcarrier-hand-eye-dep})`.

      ``load_carrier_ids``: IDs of the load carriers which should be detected.

    Potentially required arguments:

      ``robot_pose``: see :ref:`sect-loadcarrier-hand-eye-dep`:latex:`\:(Section \ref{loadcarrier:sect-loadcarrier-hand-eye-dep})`.

    Optional arguments:

      ``region_of_interest_id``: ID of the 3D region of interest where to search for the load carriers.

      .. Warning:: In SilhouetteMatch, instead of the ``region_of_interest_id`` field there is a ``region_of_interest_2d_id`` field, 
         which takes the ID of the 2D region of interest where to search for the load carriers.


   **Response:**

    .. include:: _gen/nodes/services/rc_itempick_detect_load_carriers_response.txt

    ``load_carriers``: list of detected load carriers.

    ``timestamp``: timestamp of the image set the detection ran on.

    ``return_code``: holds possible warnings or error codes and messages.



.. _expl-loadcarrier-srv-detect-filling-level:

``detect_filling_level``
^^^^^^^^^^^^^^^^^^^^^^^^

   Triggers a load carrier filling level detection as described in 
   :ref:`sect-loadcarrier-detect-filling-level`:latex:`\:(Section \ref{loadcarrier:sect-loadcarrier-detect-filling-level})`.

   **Request:**

    .. include:: _gen/nodes/services/rc_itempick_detect_filling_level_request.txt

    Required arguments:

      ``pose_frame``: see :ref:`sect-loadcarrier-hand-eye-dep`:latex:`\:(Section \ref{loadcarrier:sect-loadcarrier-hand-eye-dep})`.

      ``load_carrier_ids``: IDs of the load carriers which should be detected.

    Potentially required arguments:

      ``robot_pose``: see :ref:`sect-loadcarrier-hand-eye-dep`:latex:`\:(Section \ref{loadcarrier:sect-loadcarrier-hand-eye-dep})`.

    Optional arguments:

      ``filling_level_cell_count``: Number of cells in the filling level grid.

      ``region_of_interest_id``: ID of the 3D region of interest where to search for the load carriers.
      
      .. Warning:: In SilhouetteMatch, instead of the ``region_of_interest_id`` field there is a ``region_of_interest_2d_id`` field, 
         which takes the ID of the 2D region of interest where to search for the load carriers.


   **Response:**

    .. include:: _gen/nodes/services/rc_itempick_detect_filling_level_response.txt

    ``load_carriers``: list of detected load carriers and their filling level.

    ``timestamp``: timestamp of the image set the detection ran on.

    ``return_code``: holds possible warnings or error codes and messages.

