.. include:: global_rst.glb

.. _sect-silhouettematch:

SilhouetteMatch
===============

.. index:: ! SilhouetteMatch
   single: object detection
   single: silhouette

.. |silm| replace:: SilhouetteMatch

Introduction
------------

The |silm| component is an optional on-board component of the |rc_xxx|, which
detects objects by matching a predefined silhouette (“template”) to edges in an image.

.. Note::

   This component is optional and requires a separate |silm| :ref:`license<sect-updating-license>`
   :latex:`(Section \ref{maintenance:sect-updating-license})` to be purchased.

For the |silm| component to work, special object templates are required for each type of object to
be detected. |manufacturer| offers a template generation service on their
`website <https://roboception.com/en/template-request/>`_:latex:`\:(\url{https://roboception.com/en/template-request/})`,
where the user can upload CAD files or recorded data of the objects and request object templates for the |silm| component.

The object templates consist of significant edges of each object. These template edges are matched to the
edges detected in the left and right camera images, considering the
actual size of the objects and their distance from the camera. The poses of the detected objects are
returned and can be used for grasping, for example.

The |silm| component offers:

- A dedicated page on the |rc_xxx| :ref:`sect-web-gui`:latex:`\:(Section \ref{installation:sect-web-gui})`
  for easy setup, configuration, testing, and application tuning.
- A :doc:`rest_api`:latex:`\:(Section \ref{rest_api:sect-rest-api})` and a
  :doc:`eki`:latex:`\:(Section \ref{eki:sect-eki})`.
- The definition of 2D regions of interest to select relevant parts of the camera image 
  (see :ref:`sect-silhouettematch-roi`:latex:`, Section \ref{silhouettematch:sect-silhouettematch-roi}`).
- A load carrier detection functionality for bin-picking applications 
  (see :ref:`sect-loadcarrier`:latex:`, Section \ref{loadcarrier:sect-loadcarrier}`),
  to provide grasps for objects inside a bin only.
- The definition of grasp points for each template via an interactive visualization in the |webgui|.
- Support for static and robot-mounted cameras and
  optional integration with the :doc:`handeye_calibration`
  :latex:`(Section \ref{handeye_calibration:sect-handeye-calibration})` component,
  to provide grasps in the user-configured external reference frame.
- Sorting of grasps according to reachability so that the ones which are closest to the 
  camera along the z axis of the preferred orientation of the TCP are returned first.


Suitable objects
^^^^^^^^^^^^^^^^

The |silm| component is intended for objects which have significant edges on a common plane that is
parallel to the base plane on which the objects are placed. This applies to flat, nontransparent
objects, such as routed, laser-cut or water-cut 2D parts and flat-machined parts. More complex
parts can also be detected if there are significant edges on a common plane, e.g. a special
pattern printed on a flat surface.

The |silm| component works best for objects on a texture-free base plane. The color of the base plane should
be chosen such that a clear contrast between the objects and the base plane appears in the intensity image.

Suitable scene
^^^^^^^^^^^^^^

The scene must meet the following conditions to be suitable for the |silm| component:

- The objects to be detected must be suitable for the |silm| component as described above.
- Only objects belonging to one specific template are visible at a time (unmixed scenario). In case other objects are visible as well, a proper region of interest (ROI) must be set.
- All visible objects are lying on a common base plane, which has to be calibrated.
- The offset between the base plane normal and the camera's line of sight does not exceed 10 degrees.
- The objects are not partially or fully occluded.
- All visible objects are right side up (no flipped objects).
- The object edges to be matched are visible in both, left and right camera images.


.. _sect-silhouettematch-base-plane-calib:

Base-plane calibration
----------------------

.. index::
   pair: SilhouetteMatch; base-plane calibration
   pair: SilhouetteMatch; base-plane

Before objects can be detected, a base-plane calibration must be performed.
Thereby, the distance and angle of the plane on which the objects are
placed is measured and stored persistently on the |rc_xxx|.

Separating the detection of the base plane from the actual object detection
renders scenarios possible in which the base plane is temporarily occluded.
Moreover, it increases performance of the object detection for scenarios where
the base plane is fixed for a certain time; thus, it is not necessary
to continuously re-detect the base plane.

The base-plane calibration can be performed in three different ways,
which will be explained in more detail further down:

- AprilTag based
- Stereo based
- Manual

The base-plane calibration is successful if the normal vector of the estimated base plane is at most
10 degrees offset to the camera's line of sight. If the base-plane calibration
is successful, it will be stored persistently on the |rc_xxx| until it is removed or a new base-plane
calibration is performed.

.. Note::

   To avoid privacy issues, the image of the persistently stored base-plane calibration will
   appear blurred after rebooting the |rc_xxx|.

In scenarios where the base plane is not accessible for calibration, a plane parallel to the base-plane can be calibrated.
Then an ``offset`` parameter can be used to shift the estimated plane onto the actual base plane where
the objects are placed. The ``offset`` parameter gives the distance in meters by which the estimated plane
is shifted towards the camera.

In the |restapi|, a plane is defined by a ``normal`` and a ``distance``.
``normal`` is a normalized 3-vector, specifying the normal of the plane.
The normal points away from the camera.
``distance`` represents the distance of the plane from the camera along the normal.
Normal and distance can also be interpreted as :math:`a`, :math:`b`, :math:`c`, and :math:`d` components
of the plane equation, respectively:

.. math::
   ax + by + cz + d = 0


AprilTag based base-plane calibration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

AprilTag detection (ref. :doc:`tagdetect`:latex:`, Section \ref{tagdetect:sect-tag-detection}`)
is used to find AprilTags
in the scene and fit a plane through them. At least three AprilTags must be placed on the base
plane so that they are visible in the left and right camera images. The tags should be placed
such that they are spanning a triangle that is as large as possible. The larger the triangle,
the more accurate is the resulting base-plane estimate.
Use this method if the base plane is untextured and no external random dot projector is available.
This calibration mode is available via the :doc:`rest_api`:latex:`\:(Section \ref{rest_api:sect-rest-api})`
and the |rcxxx| |webgui|.

Stereo based base-plane calibration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The 3D point cloud computed by the stereo matching component is used to fit a plane
through its 3D points.
Therefore, the region of interest (ROI) for this method must
be set such that only the relevant base plane is included.
The ``plane_preference`` parameter allows to select whether the plane closest to
or farthest from the camera should be used as base plane.
Selecting the closest plane can be used in scenarios where the base plane is
completely occluded by objects or not accessible for calibration.
Use this method if the base plane is well textured or you can
make use of a random dot projector to project texture on the base plane.
This calibration mode is available via the :doc:`rest_api`:latex:`\:(Section \ref{rest_api:sect-rest-api})`
and the |rcxxx| |webgui|.

Manual base-plane calibration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The base plane can be set manually if its parameters are known, e.g. from previous
calibrations. This calibration mode is only available via the :doc:`rest_api`:latex:`\:(Section \ref{rest_api:sect-rest-api})`
and not the |rcxxx| |webgui|.

.. _sect-silhouettematch-roi:

Setting a region of interest
----------------------------

.. index::
   single: SilhouetteMatch; region of interest

If objects are to be detected only in part of the camera’s field of view,
a region of interest (ROI) can be set accordingly. This ROI is defined as a rectangular part
of the left camera image, and can be set via the :doc:`rest_api`:latex:`\:(Section \ref{rest_api:sect-rest-api})`
or the |rcxxx| |webgui|.
The |webgui| offers an easy-to-use selection tool.
Up to 50 ROIs can be set and stored persistently on the |rc_xxx|.
Each ROI must have a unique name to address a specific ROI in the base-plane calibration or
object detection process.

In the |restapi|, a 2D ROI is defined by the following values:

- ``id``: Unique name of the region of interest
- ``offset_x``, ``offset_y``: offset in pixels along the x-axis and y-axis from the top-left corner of the image, respectively
- ``width``, ``height``: width and height in pixels

.. _sect-silhouettematch-grasps:

Setting of grasp points
-----------------------

.. index::
   single: SilhouetteMatch; grasp points
   single: SilhouetteMatch; object template

To use |silm| directly in a robot application, grasp points
can be defined for each template. A grasp point represents the desired position and orientation
of the robot's TCP (Tool Center Point) to grasp an object as shown in
:numref:`fig-silhouettematch-grasp-points`

.. _fig-silhouettematch-grasp-points:
.. figure:: images/grasp_points_silm.*
   :width: 50%
   :align: center

   Definition of grasp points with respect to the robot's TCP

Each grasp consists of an ``id`` which must be
unique within all grasps for an object template, the ``template_id`` representing the template 
to which the grasp should be attached, and the ``pose`` in the coordinate frame of the object template.
Grasp points can be set via the :doc:`rest_api`:latex:`\:(Section \ref{rest_api:sect-rest-api})`,
or by using the interactive visualization in the |webgui|. The |rcxxx| can store up to 50 grasp
points per template.

Setting grasp points in the |webgui|
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The |rc_xxx| |webgui| provides an intuitive and interactive way of defining grasp points for object templates.
In a first step, the object template has to be uploaded to the |rc_xxx|. This can be done on the *SilhouetteMatch* page
in the *Modules* tab of the |webgui| by clicking on *add new Template* in the *Templates and Grasps* section of the *SilhouetteMatch* page. Once the
template upload is complete, a dialog with a 3D visualization of the object tempate is shown 
for adding or editing grasp
points. The same dialog appears when editing an existing template.

This dialog provides two ways for setting grasp points:

1. **Adding grasps manually**:
   By clicking on the *+* symbol, a new grasp is placed in the object origin. The
   grasp can be given a unique name which corresponds to its ID.
   The desired pose of the grasp can be entered in the fields for *Position* and *Roll/Pitch/Yaw* which are given
   in the coordinate frame of the object template represented by the long x, y and z axes in the visualization.
   The grasp point can be placed freely with respect to the object template - inside, outside or on the surface.
   The grasp point and its orientation are visualized in 3D for verification.

2. **Adding grasps interactively**:
   Grasp points can be added interactively by first clicking on the *Add Grasp* button
   in the upper left corner of the visualization and then clicking on the desired point on the object template visualization. The
   grasp is attached to the template surface. The grasp orientation is a right-handed coordinate system and
   is chosen such that its z axis is perpendicular to the surface pointing inside the template at
   the grasp position. The position and orientation in the object coordinate frame is displayed on the right.
   The position and orientation of the grasp can also be changed interactively. 
   In case *Snap to surface* is enabled in the visualization (default), the grasp can be moved along the template
   surface by clicking on the *Translate* button in the visualization and then clicking on the grasp point and dragging
   it to the desired position. The orientation of the grasp around the surface normal can also be changed by choosing
   *Rotate* and then rotating the grasp with the cursor.
   In case *Snap to surface* is disabled, the grasp can be translated and rotated freely in all three dimensions.

If the object template has symmetries, the grasps which are symmetric to the defined grasps can be displayed by clicking on
*Show symmetric grasps*.

Setting grasp points via the |rest-api|
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Grasp points can be set via the :doc:`rest_api`:latex:`\:(Section \ref{rest_api:sect-rest-api})`
using the ``set_grasp`` or ``set_all_grasps`` services
(see :ref:`sect-silhouettematch-services`:latex:`, Section \ref{silhouettematch:sect-silhouettematch-services}`).
In the |silm| component a grasp consists of the ``template_id`` of the template
to which the grasp should be attached, an ``id`` uniquely identifying the grasp point and
the ``pose``. The pose is given in the coordinate frame of the object template and
consists of a ``position`` in meters and an ``orientation`` as quaternion.

.. _sect-silhouettematch-set-preferred-orientation:

Setting the preferred orientation of the TCP
--------------------------------------------

.. index::
   single: SilhouetteMatch; preferred orientation

The |silm| component determines the reachability of grasp points based on the *preferred orientation* of the
gripper or TCP. The preferred orientation can be set via the ``set_preferred_orientation`` service or on
the *SilhouetteMatch* page in the |webgui|.
The resulting direction of the TCP's z axis is used to reject grasps which cannot be reached by the gripper.
Furthermore, it is used to sort the reachable grasps such that the closest grasps to the camera along the Z 
axis of the preferred orientation of the TCP are returned first.

The preferred orientation can be set in the camera coordinate frame or in the external coordinate frame, in case
a hand-eye calibration is available. If the preferred orientation is specified in the external coordinate frame
and the sensor is robot mounted, the current robot pose has to be given to each object detection call, so that the
preferred orientation can be used for filtering and sorting the grasps on the detected objects.
If no preferred orientation is set, the z axis of the left camera is used as the preferred orientation of the TCP.

.. _sect-silhouettematch-detect:

Detection of objects
--------------------

.. index::
   single: SilhouetteMatch; detection of objects

Objects can only be detected after a successful base-plane calibration.
It must be ensured that the position and orientation of the base plane
does not change before the detection of objects.
Otherwise, the base-plane calibration must be renewed.


For triggering the object detection, in general, the following information
must be provided to the |silm| component:

- The template of the object to be detected in the scene.
- The coordinate frame in which the poses of the detected objects shall be returned
  (ref. :ref:`sect-silhouettematch-hand-eye-calib`:latex:`, Section \ref{silhouettematch:sect-silhouettematch-hand-eye-calib}`).

Optionally, further information can be given to the |silm| component:

- An offset in case the objects are lying not on the base plane but on a plane parallel
  to it. The offset is the distance between both planes
  given in the direction towards the camera. If omitted, an offset of 0 is assumed.
- The ID of the load carrier which contains the objects to be detected.
- The ID of the region of interest where to search for the load carrier if a
  load carrier is set. Otherwise, the ID of the region of interest where the objects should 
  be detected. If omitted, objects are matched in the whole image.
- The current robot pose in case the camera is mounted on the robot and 
  the chosen coordinate frame for the poses is ``external`` or the preferred orientation
  is given in the external frame.
- Collision detection information: The ID of the gripper to enable collision checking and optionally
  a pre-grasp offset to define a pre-grasp position.
  The collision check requires a separate CollisionCheck :ref:`license<sect-updating-license>`
  :latex:`(Section \ref{maintenance:sect-updating-license})` to be purchased. Details on collision
  checking are given below in 
  :ref:`sect-silhouettematch-collision-check-dep`:latex:`\:(Section 
  \ref{silhouettematch:sect-silhouettematch-collision-check-dep})`.

On the |webgui| the detection can be tested in the *Try Out* section of the |silm| component's tab.
The result is visualized as shown in :numref:`fig-silm-result-images`.

.. _fig-silm-result-images:
.. figure:: images/silhouetteMatchResults.png
    :width: 100 %
    :align: center

    Result image of the |silm| component as shown in the |webgui|

The upper left image shows the selected region of interest.
The lower left image shows the calibrated base plane in blue and the template
to be matched in red with the defined grasp points in green (see :ref:`sect-silhouettematch-grasps`:latex:`, Section \ref{silhouettematch:sect-silhouettematch-grasps}`).
The template is warped to the size and tilt matching
objects on the calibrated base plane would have.

The right image shows the detection result. The shaded blue area on the
left is the region of the left camera image which does not overlap with
the right image, and in which no objects can be detected. The chosen
region of interest is shown as bold petrol rectangle. The detected edges
in the image are shown in light blue and the matches with the template
(``instances``) are shown in red. The blue circles are the origins of the detected
objects as defined in the template and the green circles are the 
reachable grasp points. Unreachable grasp points will be visualized as
red dots (not shown in the figure). 

The poses of the object origins in the chosen
coordinate frame are returned as results. If the chosen template also has grasp points attached,
a list of ``grasps`` for all objects sorted by their reachability
(see :ref:`sect-silhouettematch-set-preferred-orientation`:latex:`, Section \ref{silhouettematch:sect-silhouettematch-set-preferred-orientation}`)
is returned in addition to the list of detected objects.
The grasp poses are given in the desired coordinate frame. There are references between the
detected object instances and the grasps via their ``uuids``.
In case the templates have a continuous rotational symmetry,
all returned object poses will have the same orientation. For rotationally
non-symmetric objects, the orientation of the detected objects is aligned with
the normal of the base plane.

The detection results and runtimes are affected by several run-time parameters which are listed
and explained further down. Improper parameters can lead to time-outs of the |silm| component's
detection process.


Interaction with other components
---------------------------------

Internally, the |silm| component depends on, and interacts with other on-board
components as listed below.

.. Note::
  All changes and configuration updates to these components will affect
  the performance of the |silm| component.

.. _sect-silhouettematch-stereo-camera-matching:

Stereo camera and stereo matching
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The |silm| component makes internally use of the rectified images from the
:doc:`stereo_camera` component (``rc_stereocamera``:latex:`, Section \ref{stereo_camera:sect-stereo-camera}`).
Thus, the exposure time should be set properly to achieve the optimal performance of the component.

For base-plane calibration in stereo mode the disparity images from the :doc:`stereo_matching` component
(``rc_stereomatching``:latex:`, Section \ref{stereo_matching:sect-stereo-matching}`) are used. Apart from that,
the stereo-matching component should not be run in parallel to the |silm| component, because the detection runtime increases.

For best results it is recommended to enable
:ref:`smoothing<expl-depth-smooth>` :latex:`(Section \ref{stereo_matching:expl-depth-smooth})`
for :doc:`stereo_matching`.

IO and Projector Control
^^^^^^^^^^^^^^^^^^^^^^^^

In case the |rc_xxx| is used in conjunction with an external random dot projector and
the :doc:`iocontrol` component (``rc_iocontrol``:latex:`, Section \ref{iocontrol:sect-iocontrol}`),
the projector should be used for the stereo-based base-plane calibration.

The projected pattern must not be visible in the left and right camera images during object detection
as it interferes with the matching process.
Therefore, it must either be switched off or operated in ``ExposureAlternateActive`` mode.

.. _sect-silhouettematch-hand-eye-calib:

Hand-eye calibration
^^^^^^^^^^^^^^^^^^^^

In case the camera has been calibrated to a robot, the |silm| component can automatically provide
poses in the robot coordinate frame.
For the |silm| node's :ref:`sect-silhouettematch-services`:latex:`\:(Section \ref{silhouettematch:sect-silhouettematch-services})`, the frame of the
input and output poses and plane coordinates can be controlled with the ``pose_frame``
argument.

Two different ``pose_frame`` values can be chosen:

1. **Camera frame** (``camera``).
   All poses and plane coordinates provided to and by the component are in the camera frame.

2. **External frame** (``external``).
   All poses and plane coordinates provided to and by the component are in the external frame,
   configured by the user during the hand-eye calibration process.
   The component relies on the on-board
   :doc:`Hand-eye calibration component<handeye_calibration>`:latex:`\:(Section \ref{handeye_calibration:sect-handeye-calibration})`
   to retrieve the camera mounting (static or robot mounted) and
   the hand-eye transformation.
   If the sensor mounting is static, no further information is needed.
   If the sensor is robot-mounted, the ``robot_pose`` is required
   to transform poses to and from the ``external`` frame.

All ``pose_frame`` values that are not ``camera`` or ``external`` are rejected.

.. Note::
   If no hand-eye calibration is available, all ``pose_frame`` values should be set to ``camera``.

.. Note::
   If the hand-eye calibration has changed after base-plane calibration,
   the base-plane calibration will be marked as invalid and must be renewed.

If the sensor is robot-mounted, the current ``robot_pose`` has to be provided depending on the value of ``pose_frame``
and the definition of the preferred TCP orientation:

- If ``pose_frame`` is set to ``external``, providing the robot pose is obligatory.
- If the preferred TCP orientation is defined in ``external``, providing the robot pose is obligatory. 
- If ``pose_frame`` is set to ``camera`` and the preferred TCP orientation is defined in ``camera``, providing the robot pose is optional.

If the current robot pose is provided during calibration, it is stored persistently on the |rcxxx|.
If the updated robot pose is later provided during ``get_base_plane_calibration`` or ``detect_object``
as well, the base-plane calibration will be transformed automatically to this new robot pose.
This enables the user to change the robot pose (and thus camera position)
between base-plane calibration and object detection.

.. Note::
   Object detection can only be performed if the limit of 10 degrees angle offset between
   the base plane normal and the camera's line of sight is not exceeded.

.. _sect-silhouettematch-collision-check-dep:

CollisionCheck
^^^^^^^^^^^^^^

.. index::
   single: SilhouetteMatch; collision check

In case a CollisionCheck license is available, the collision checking can be easily enabled for
grasp computation of the |silm| component by passing the ID of the used gripper and
optionally a pre-grasp offset to the 
``detect_object`` service call. The gripper has to be
defined in the CollisionCheck component
(see :ref:`sect-collisioncheck-gripper`:latex:`\:(Section \ref{collisioncheck:sect-collisioncheck-gripper})`)
and details about collision checking are given in :ref:`sect-collision-check-other-modules`:latex:`\:(Section \ref{collisioncheck:sect-collision-check-other-modules})`. In addition, collisions
between the gripper and the calibrated base plane are checked.

If collision checking is enabled, only grasps which are collision free will be returned. 
However, the visualization images on the *SilhouetteMatch*
tab of the |webgui| also shows colliding grasp points in red.

The CollisionCheck module's run-time parameters affect the collision detection as described in
:ref:`CollisionCheck Parameters<sect-collisioncheck-parameters>`:latex:`\:(Section \ref{collisioncheck:sect-collisioncheck-parameters})`.

Parameters
----------

.. index::
  single: SilhouetteMatch; parameters

The |silm| software component is called ``rc_silhouettematch`` in the |rest-api| and is represented by the
*SilhouetteMatch* page in the *Modules* tab of the
:ref:`Web GUI<sect-web-gui>`:latex:`\:(Section \ref{installation:sect-web-gui})`.
The user can explore and configure the ``rc_silhouettematch``
component's run-time parameters, e.g. for development and testing, using the |webgui| or the
:doc:`rest_api`:latex:`\:(Section \ref{rest_api:sect-rest-api})`.

Parameter overview
^^^^^^^^^^^^^^^^^^

.. include:: _gen/nodes/params/rc_silhouettematch.txt

Description of run-time parameters
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Each run-time parameter is represented by a row on the |webgui|'s |silm| Module tab.
The name in the |webgui| is given in brackets behind the parameter name and the parameters are
listed in the order they appear in the |webgui|:

``max_number_of_detected_objects`` (*Maximum Object Number*)
    This parameter gives the maximum number of objects to detect in the scene. If more than
    the given number of objects can be detected in the scene, only the objects with the highest
    matching results are returned.

``load_carrier_model_tolerance`` (*Model Tolerance*)
    see :ref:`Parameters of the load carrier functionality<sect-loadcarrier-parameters>`:latex:`\:(Section \ref{loadcarrier:sect-loadcarrier-parameters})`.

``load_carrier_crop_distance`` (*Crop Distance*)
    see :ref:`Parameters of the load carrier functionality<sect-loadcarrier-parameters>`:latex:`\:(Section \ref{loadcarrier:sect-loadcarrier-parameters})`.

``quality`` (*Quality*)
    Object detection can be performed on images with different resolutions:
    ``High`` (1280 x 960), ``Medium`` (640 x 480) and ``Low`` (320 x 240). The lower
    the resolution, the lower the detection time, but the fewer details of the objects
    are visible.

``match_max_distance`` (*Maximum Matching Distance*)
    This parameter gives the maximum allowed pixel distance of an image edge pixel from the object
    edge pixel in the template to be still considered as matching. If the object is not perfectly
    represented in the template, it might not be detected when this parameter is low. High values,
    however, might lead to false detections in case of a cluttered scene or the presence of similar
    objects, and also increase runtime.

``match_percentile`` (*Matching Percentile*)
    This parameter indicates how strict the matching process should be. The matching percentile is
    the ratio of template pixels that must be within the Maximum Matching Distance to successfully match the template.
    The higher this number, the more accurate the match must be to be considered as valid.

``edge_sensitivity`` (*Edge Sensitivity*)
    This parameter influences how many edges are detected in the camera images. The higher this number, the
    more edges are found in the intensity image. That means, for lower numbers, only the most significant edges
    are considered for template matching. A large number of edges in the image might increase the detection time.

Status values
-------------

.. index::
  single: SilhouetteMatch; status

This component reports the following status values:

.. tabularcolumns:: |l|L|
.. csv-table:: The ``rc_silhouettematch`` component's status values
	:header:  Name, Description

	"``calibrate_service_time``","Processing time of the base-plane calibration, including data acquisition time"
	"``data_acquisition_time``","Time in seconds required by the last active service to acquire images"
        "``load_carrier_detection_time``","Processing time of the last load carrier detection in seconds"
	"``detect_service_time``","Processing time of the object dection, including data acquisition time"
	"``last_timestamp_processed``","The timestamp of the last processed dataset"

.. _sect-silhouettematch-services:

Services
--------

.. index::
  single: SilhouetteMatch; services

The user can explore and call the ``rc_silhouettematch`` component's services,
e.g. for development and testing, using the
:ref:`sect-rest-api`:latex:`\:(Section \ref{rest_api:sect-rest-api})` or
the |rc_xxx|
:ref:`sect-web-gui`:latex:`\:(Section \ref{installation:sect-web-gui})`.

Each service response contains a ``return_code``,
which consists of a ``value`` plus an optional ``message``.
A successful service returns with a ``return_code`` value of ``0``.
Negative ``return_code`` values indicate that the service failed.
Positive ``return_code`` values indicate that the service succeeded with additional information.

.. tabularcolumns:: |c|L|
.. _tab-silhouettematch-return-codes:
.. csv-table:: Return codes of the |silm| component services
    :header:  Code, Description

    "0",    "Success"
    "-1",   "An invalid argument was provided"
    "-3",   "An internal timeout occurred, e.g. during object detection"
    "-4",   "Data acquisition took longer than the maximum allowed time of 5.0 seconds"
    "-7",   "Data could not be read or written to persistent storage"
    "-8",   "Component is not in a state in which this service can be called. E.g. ``detect_object`` cannot be called if there is no base-plane calibration."
    "-10",  "New element could not be added as the maximum storage capacity of regions of interest or templates has been exceeded"
    "-100", "An internal error occurred"
    "-101", "Detection of the base plane failed"
    "-102", "The hand-eye calibration changed since the last base-plane calibration"
    "-104", "Offset between the base plane normal and the camera's line of sight exceeds 10 degrees"
    "10",   "The maximum storage capacity of regions of interest or templates has been reached"
    "11",  "An existing element was overwritten"
    "100",  "The requested load carrier was not detected in the scene"
    "101",  "None of the detected grasps is reachable"
    "102",  "The detected load carrier is empty"
    "103",  "All detected grasps are in collision with the load carrier"
    "107",  "The base plane was not transformed to the current camera pose, e.g. because no robot pose was provided during base-plane calibration"
    "108",  "The template is deprecated."
    "151",  "The object template has a continuous symmetry"
    "999",  "Additional hints for application development"

The |silm| component offers the following services.

.. _expl-silhouettematch-srv-calib:

``calibrate_base_plane``
^^^^^^^^^^^^^^^^^^^^^^^^

   Triggers the calibration of the base plane, as described in
   :ref:`sect-silhouettematch-base-plane-calib`:latex:`\:(Section \ref{silhouettematch:sect-silhouettematch-base-plane-calib})`.
   A successful base-plane calibration is stored persistently on the |rc_xxx| and returned by this service.
   The base-plane calibration is persistent over firmware updates and rollbacks.

   All images used by the service are guaranteed to be newer than the service trigger time.

   **Request:**

      .. include:: _gen/nodes/services/rc_silhouettematch_calibrate_base_plane_request.txt

     Required arguments:

      ``plane_estimation_method``: method to use for base-plane calibration. Valid values are ``STEREO``, ``APRILTAG``, ``MANUAL``.

      ``pose_frame``: see :ref:`sect-silhouettematch-hand-eye-calib`:latex:`\:(Section \ref{silhouettematch:sect-silhouettematch-hand-eye-calib})`.

     Potentially required arguments:

      ``plane`` if ``plane_estimation_method`` is ``MANUAL``: plane that will be set as base-plane calibration.

      ``robot_pose``: see :ref:`sect-silhouettematch-hand-eye-calib`:latex:`\:(Section \ref{silhouettematch:sect-silhouettematch-hand-eye-calib})`.

      ``region_of_interest_2d_id``: ID of the region of interest for base-plane calibration.

     Optional arguments:

      ``offset``: offset in meters by which the estimated plane will be shifted towards the camera.

      ``plane_preference`` in ``stereo``: whether the plane closest to or farthest from the camera should be used as base plane.
      This option can be set only if ``plane_estimation_method`` is ``STEREO``.
      Valid values are ``CLOSEST`` and ``FARTHEST``. If not set, the default is ``FARTHEST``.


   **Response:**

     .. include:: _gen/nodes/services/rc_silhouettematch_calibrate_base_plane_response.txt

     ``plane``: calibrated base plane.

     ``timestamp``: timestamp of the image set the calibration ran on.

     ``return_code``: holds possible warnings or error codes and messages.


.. _expl-silhouettematch-srv-get-calib:

``get_base_plane_calibration``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

   Returns the configured base-plane calibration.

   **Request:**

     .. include:: _gen/nodes/services/rc_silhouettematch_get_base_plane_calibration_request.txt

     Required arguments:

       ``pose_frame``: see :ref:`sect-silhouettematch-hand-eye-calib`:latex:`\:(Section \ref{silhouettematch:sect-silhouettematch-hand-eye-calib})`.

     Potentially required arguments:

       ``robot_pose``: see :ref:`sect-silhouettematch-hand-eye-calib`:latex:`\:(Section \ref{silhouettematch:sect-silhouettematch-hand-eye-calib})`.


   **Response:**

     .. include:: _gen/nodes/services/rc_silhouettematch_get_base_plane_calibration_response.txt


.. _expl-silhouettematch-srv-delete-calib:

``delete_base_plane_calibration``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

   Deletes the configured base-plane calibration.

   .. include:: _gen/nodes/services/rc_silhouettematch_delete_base_plane_calibration.txt

.. _expl-silhouettematch-srv-set-roi:

``set_region_of_interest_2d``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

   Persistently stores a 2D region of interest on the |rc_xxx|. All configured 2D regions
   of interest are persistent over firmware updates and rollbacks.

   .. include:: _gen/nodes/services/rc_silhouettematch_set_region_of_interest_2d_request.txt

   ``region_of_interest_2d``: see :ref:`sect-silhouettematch-roi`:latex:`\:(Section \ref{silhouettematch:sect-silhouettematch-roi})`.

   .. include:: _gen/nodes/services/rc_silhouettematch_set_region_of_interest_2d_response.txt

.. _expl-silhouettematch-srv-get-rois:

``get_regions_of_interest_2d``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

   Returns the configured 2D regions of interest with the requested ``region_of_interest_2d_ids``.
   If no ``region_of_interest_2d_ids`` are provided, all configured 2D regions of interest are
   returned.

   .. include:: _gen/nodes/services/rc_silhouettematch_get_regions_of_interest_2d.txt

.. _expl-silhouettematch-srv-delete-rois:

``delete_regions_of_interest_2d``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

   Deletes the configured 2D regions of interest with the requested ``region_of_interest_2d_ids``.
   All 2D regions of interest to be deleted must be explicitly specified in ``region_of_interest_2d_ids``.

   .. include:: _gen/nodes/services/rc_silhouettematch_delete_regions_of_interest_2d.txt

``set_load_carrier``
^^^^^^^^^^^^^^^^^^^^

   see :ref:`expl-loadcarrier-srv-set-lc`:latex:`\:(Section \ref{loadcarrier:expl-loadcarrier-srv-set-lc})`.
   
.. _expl-silhouettematch-srv-get-lc:

``get_load_carriers``
^^^^^^^^^^^^^^^^^^^^^

   see :ref:`expl-loadcarrier-srv-get-lc`:latex:`\:(Section \ref{loadcarrier:expl-loadcarrier-srv-get-lc})`.

.. _expl-silhouettematch-srv-delete-lc:

``delete_load_carriers``
^^^^^^^^^^^^^^^^^^^^^^^^

   see :ref:`expl-loadcarrier-srv-delete-lc`:latex:`\:(Section \ref{loadcarrier:expl-loadcarrier-srv-delete-lc})`.

.. _expl-silhouettematch-srv-detect-lc:

``detect_load_carriers``
^^^^^^^^^^^^^^^^^^^^^^^^

   see :ref:`expl-loadcarrier-srv-detect-lc`:latex:`\:(Section \ref{loadcarrier:expl-loadcarrier-srv-detect-lc})`.


.. _expl-silhouettematch-srv-detect-filling-level:

``detect_filling_level``
^^^^^^^^^^^^^^^^^^^^^^^^

   see :ref:`expl-loadcarrier-srv-detect-filling-level`:latex:`\:(Section \ref{loadcarrier:expl-loadcarrier-srv-detect-filling-level})`.

.. _expl-silhouettematch-srv-set-preferred-orientation:

``set_preferred_orientation``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

   Persistently stores the preferred orientation of the gripper to compute the reachability of the grasps,
   which is used for filtering and sorting the grasps returned by the ``detect_object`` service
   (see :ref:`sect-silhouettematch-set-preferred-orientation`:latex:`, Section \ref{silhouettematch:sect-silhouettematch-set-preferred-orientation}`).

   .. include:: _gen/nodes/services/rc_silhouettematch_set_preferred_orientation.txt

.. _expl-silhouettematch-srv-get-preferred-orientation:

``get_preferred_orientation``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

   Returns the preferred orientation of the gripper to compute the reachability of the grasps,
   which is used for filtering and sorting the grasps returned by the ``detect_object`` service
   (see :ref:`sect-silhouettematch-set-preferred-orientation`:latex:`, Section \ref{silhouettematch:sect-silhouettematch-set-preferred-orientation}`).

   .. include:: _gen/nodes/services/rc_silhouettematch_get_preferred_orientation.txt

.. _expl-silhouettematch-srv-set-grasp:

``set_grasp``
^^^^^^^^^^^^^^^^^^^^

   Persistently stores a grasp for the given object template on the |rc_xxx|.
   All configured grasps are persistent over firmware updates and rollbacks.

   .. include:: _gen/nodes/services/rc_silhouettematch_set_grasp.txt

   Details for the definition of the ``grasp`` type are given in
   :ref:`sect-silhouettematch-grasps`:latex:`\:(Section \ref{silhouettematch:sect-silhouettematch-grasps})`.


.. _expl-silhouettematch-srv-set-all-grasps:

``set_all_grasps``
^^^^^^^^^^^^^^^^^^^^

   Replaces the list of grasps for the given object template on the |rc_xxx|.

   .. include:: _gen/nodes/services/rc_silhouettematch_set_all_grasps.txt

   Details for the definition of the ``grasp`` type are given in
   :ref:`sect-silhouettematch-grasps`:latex:`\:(Section \ref{silhouettematch:sect-silhouettematch-grasps})`.

.. _expl-silhouettematch-srv-get-grasps:

``get_grasps``
^^^^^^^^^^^^^^^^^^^^^

   Returns all configured grasps which have the requested ``grasp_ids`` and belong to the requested ``template_ids``.
   If no ``grasp_ids`` are provided, all grasps belonging to the requested ``template_ids`` are returned.
   If no ``template_ids`` are provided, all grasps with the requested ``grasp_ids`` are returned.
   If neither IDs are provided, all configured grasps are returned.

   .. include:: _gen/nodes/services/rc_silhouettematch_get_grasps.txt

.. _expl-silhouettematch-srv-delete-grasps:

``delete_grasps``
^^^^^^^^^^^^^^^^^^^^^^^^

   Deletes all grasps with the requested ``grasp_ids`` that belong to the requested ``template_ids``.
   If no ``grasp_ids`` are provided, all grasps belonging to the requested ``template_ids`` are deleted.
   The ``template_ids`` list must not be empty.

   .. include:: _gen/nodes/services/rc_silhouettematch_delete_grasps.txt

.. _expl-silhouettematch-srv-get-symmetric-grasps:

``get_symmetric_grasps``
^^^^^^^^^^^^^^^^^^^^^^^^

   Returns all grasps that are symmetric to the given grasp.
   The first grasp in the returned list is the one that was passed with the service call.
   If the object template does not have an exact symmetry, only the grasp passed with the
   service call will be returned. If the object template has a continuous symmetry (e.g. a
   cylindrical object), only 12 equally spaced sample grasps will be returned.

   .. include:: _gen/nodes/services/rc_silhouettematch_get_symmetric_grasps.txt

   Details for the definition of the ``grasp`` type are given in
   :ref:`sect-silhouettematch-grasps`:latex:`\:(Section \ref{silhouettematch:sect-silhouettematch-grasps})`.

.. _expl-silhouettematch-srv-detect-objects:

``detect_object``
^^^^^^^^^^^^^^^^^

   Triggers an object detection as described in
   :ref:`sect-silhouettematch-detect`:latex:`\:(Section \ref{silhouettematch:sect-silhouettematch-detect})`
   and returns the pose of all found object instances.
   The maximum number of returned instances can be controlled with the ``max_number_of_detected_objects``
   parameter.

   All images used by the service are guaranteed to be newer than the service trigger time.

   **Request:**

     .. include:: _gen/nodes/services/rc_silhouettematch_detect_object_request.txt

     Required arguments:

       ``object_id`` in ``object_to_detect``: ID of the template which should be detected.

       ``pose_frame``: see :ref:`sect-silhouettematch-hand-eye-calib`:latex:`\:(Section \ref{silhouettematch:sect-silhouettematch-hand-eye-calib})`.

     Potentially required arguments:

       ``robot_pose``: see :ref:`sect-silhouettematch-hand-eye-calib`:latex:`\:(Section \ref{silhouettematch:sect-silhouettematch-hand-eye-calib})`.

     Optional arguments:

       ``offset``: offset in meters by which the base-plane calibration will be shifted towards the camera.

       ``load_carrier_id``: ID of the load carrier which contains the items to be detected.

       ``collision_detection``: see :ref:`sect-collision-check-other-modules`:latex:`\:(Section \ref{collisioncheck:sect-collision-check-other-modules})`.
       The collision check requires a separate CollisionCheck :ref:`license<sect-updating-license>`:latex:`\:(Section \ref{maintenance:sect-updating-license})` to be purchased.

   **Response:**

     .. include:: _gen/nodes/services/rc_silhouettematch_detect_object_response.txt

     ``object_id``: ID of the detected template.

     ``instances``: list of detected object instances.

     ``grasps``: list of grasps on the detected objects. The grasps are ordered by their reachability starting with the grasp that can be reached
     most easily by the robot. The ``instance_uuid`` gives the reference to the detected object in ``instances`` this grasp belongs to.

     ``load_carriers``: list of detected load carriers.

     ``timestamp``: timestamp of the image set the detection ran on.

     ``return_code``: holds possible warnings or error codes and messages.


.. _expl-silhouettematch-srv-save-params:

``save_parameters``
^^^^^^^^^^^^^^^^^^^

   This service saves the currently set parameters persistently.
   Thereby, the same parameters will still apply after a reboot of
   the |rcxxx|.
   The node parameters are not persistent over firmware updates and rollbacks.

   .. include:: _gen/nodes/services/rc_silhouettematch_save_parameters.txt

.. _expl-silhouettematch-srv-reset-params:

``reset_defaults``
^^^^^^^^^^^^^^^^^^

   This service resets all parameters of the component to its default values,
   as listed in above table.
   The reset does not apply to regions of interest and base-plane calibration.

   .. include:: _gen/nodes/services/rc_silhouettematch_reset_defaults.txt


Template Upload
---------------

.. index::
  single: SilhouetteMatch; template api

For template upload, download and listing, special |rest-api| endpoints are provided.
Up to 50 templates can be stored persistently on the |rc_xxx|.

.. only:: rc_visard

   .. include:: _gen/swagger/rc_visard/templates_silhouettematch.txt

.. only:: rc_cube

   .. include:: _gen/swagger/rc_cube/templates_silhouettematch.txt
