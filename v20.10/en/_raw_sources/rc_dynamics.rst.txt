.. include:: global_rst.glb

.. _sect-rc-dynamics-interface:

The rc_dynamics interface
-------------------------

.. index::
   single: rc_dynamics

The rc_dynamics interface offers continuous, real-time data-stream access
to |rcvisard|'s several
:ref:`dynamic state estimates <sect-dynamics-streams>`:latex:`\:(Section
\ref{dynamics:sect-dynamics-streams})` as continuous,
real-time data streams.
It allows state estimates of all offered types to be configured to be
streamed to any host in the network. The
:ref:`sect-datastream-protocol`:latex:`\:(Section \ref{rc_dynamics:sect-datastream-protocol})` used is agnostic w.r.t.
operating system and programming language.


Starting/stopping dynamic-state estimation
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The |rcvisard|'s dynamic-state estimates are only available if the respective
component, i.e., the
:ref:`sensor dynamics component <sect-dynamics>`:latex:`\:(Section \ref{dynamics:sect-dynamics})`,
is turned on. This can be done either in the |webgui| - a respective switch is
offered in the *Dynamics* tab - or via the |restapi| by
using the component's service calls. A sample curl request to start dynamic-state
estimation would look like:

.. code-block:: bash

   curl -X PUT --header 'Content-Type: application/json' -d '{}' 'http://<rcvisard>/api/v1/nodes/rc_dynamics/services/start'

.. note:: To save computational resources, it is recommended to stop
          dynamic-state estimation when not needed any longer.


Configuring data streams
^^^^^^^^^^^^^^^^^^^^^^^^

Availabe data streams, i.e., dynamic-state estimates, can be listed and
configured by the |rcvisard|'s
:ref:`REST-API <sect-rest-datastreams>`:latex:`\:(Section
\ref{rest_api_datastreams:sect-rest-datastreams})`, e.g., a list of all available data
streams can be requested with :http:get:`/datastreams`. For a detailed
description of the following data streams, please refer to
:ref:`sect-dynamics-streams`:latex:`\:(Section
\ref{dynamics:sect-dynamics-streams})`.

.. include:: _gen/datastreams/datastreams.txt

The general procedure for working with the rc_dynamics interface is the following:

#. Request a data stream via |restapi|.
      The following sample ``curl`` command issues a
      :http:put:`/datastreams/{stream}` request to initiate
      a stream of type ``pose_rt`` from the |rcvisard| to client host
      ``10.0.1.14`` at port ``30000``:

      .. sourcecode:: bash

         curl -X PUT --header 'Content-Type: application/x-www-form-urlencoded' --header 'Accept: application/json' -d 'destination=10.0.1.14:30000' 'http://<rcvisard>/api/v1/datastreams/pose_rt'

#. Receive and deserialize data.
      With a successful request, the stream is
      initiated and data of the
      specified stream type is continuously sent to the client host.
      According to the :ref:`sect-datastream-protocol`:latex:`\:(Section \ref{rc_dynamics:sect-datastream-protocol})`, the client needs to
      receive, deserialize and process the data.

#. Stop a requested data stream via |restapi|.
      The following sample
      ``curl`` command issues a
      :http:delete:`/datastreams/{stream}` request to delete, i.e., stop, the
      previously requested stream of type ``pose_rt`` with destination
      ``10.0.1.14:30000``:

      .. sourcecode:: bash

         curl -X DELETE --header 'Accept: application/json' 'http://<rcvisard>/api/v1/datastreams/pose_rt?destination=10.0.1.14:30000'

      To remove all destinations for a stream, simply omit the destination parameter.


.. warning:: Data streams can not be deleted automatically, i.e., the |rcvisard| keeps
      streaming data even if the client-side is disconnected or has stopped
      consuming the sent datagrams. A maximum of 10 destinations per stream are allowed.
      It is therefore strongly recommended to stop data streams via
      the |restapi| when they are or no longer used.


.. _sect-datastream-protocol:

Data-stream protocol
^^^^^^^^^^^^^^^^^^^^
Once a data stream is established, data is continuously sent to the
specified client host and port (``destination``) via the following protocol:

Network protocol:
   The only currently supported network protocol is :term:`UDP`, i.e., data is
   sent as UDP datagrams.

Data serialization:
   The data being sent is serialized via
   `Google protocol buffers <https://developers.google.com/protocol-buffers/>`_.
   The following message type definitions are used.

   .. _protobuf-frame:

   - The :ref:`camera-pose streams<sect-datastream-pose>` and
     :ref:`real-time camera-pose streams<sect-datastream-pose-rt>`\
     :latex:`\:(Section \ref{dynamics:sect-datastream-pose-rt})` are
     serialized using the ``Frame`` message type:

      .. literalinclude:: _protobuf/frame.proto
         :lines: 11-
         :language: protobuf

     The ``producer`` field can take the values ``ins``, ``slam``,
     ``rt_ins``, and ``rt_slam``, indicating whether the data was computed
     by SLAM or Stereo INS, and is real-time (rt) or not.

   .. _protobuf-dynamics:

   - The :ref:`real-time dynamics stream <sect-datastream-dynamics>`\
     :latex:`\:(Section \ref{dynamics:sect-datastream-dynamics})` is
     serialized using the ``Dynamics`` message type:

      .. literalinclude:: _protobuf/dynamics.proto
         :lines: 15-
         :language: protobuf

     The ``producer`` field can take the values ``rt_ins``
     and ``rt_slam``, indicating whether the data was computed
     by SLAM or Stereo INS.

   .. _protobuf-imu:

   - The :ref:`IMU stream <sect-datastream-imu>`:latex:`\:(Section \ref{dynamics:sect-datastream-imu})` is
     serialized using the ``Imu`` message type:

      .. literalinclude:: _protobuf/imu.proto
         :lines: 12-
         :language: protobuf

   - The nested types ``PoseStamped``, ``Pose``, ``Time``,  ``Quaternion``,
     and ``Vector3D`` are defined as follows:

      .. literalinclude:: _protobuf/pose_stamped.proto
         :lines: 12-
         :language: protobuf

      .. literalinclude:: _protobuf/pose.proto
         :lines: 12-
         :language: protobuf

      .. literalinclude:: _protobuf/time.proto
         :lines: 9-
         :language: protobuf

      .. literalinclude:: _protobuf/quaternion.proto
         :lines: 9-
         :language: protobuf

      .. literalinclude:: _protobuf/vector3d.proto
         :lines: 9-
         :language: protobuf


rc_dynamics_api
^^^^^^^^^^^^^^^

Our open-source ``rc_dynamics_api`` package provides a simple, convenient
C++ wrapper to request and parse rc_dynamics streams.
See http://www.roboception.com/download.
