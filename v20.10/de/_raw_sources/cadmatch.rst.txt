
.. include:: global_rst.glb

.. _sect-cadmatch:

CADMatch
========

.. index:: ! CADMatch
   single: bin picking
   single: grasp computation
   single: 3D object detection
   single: object detection

.. |cadm| replace:: CADMatch

Introduction
------------

.. Short description and functionalities

The |cadm| component is an optional component of the |rc_xxx|.

.. Note::

   The component is optional and requires a separate |cadm| :ref:`license<sect-updating-license>`
   :latex:`(Section \ref{maintenance:sect-updating-license})` to be purchased.

This component provides an out-of-the-box perception solution for 3D object detection and grasping.
|cadm| targets the detection of 3D objects based on a CAD template for picking
with a general gripper. The objects can be located in a bin or placed arbitrarily in the
field of view of the camera.

For the |cadm| component to work, special object templates are required for each type of object to
be detected. Please get in touch with the |manufacturer| support (:ref:`sect-contact`:latex:`, 
Section \ref{contact:sect-contact}`) to order a template for your CAD file.

The |cadm| component offers:

- A dedicated page on the |rc_xxx| :ref:`sect-web-gui`:latex:`\:(Section \ref{installation:sect-web-gui})`
  for easy setup, configuration, testing, and application tuning.
- A :doc:`rest_api`:latex:`\:(Section \ref{rest_api:sect-rest-api})` and a
  :doc:`eki`:latex:`\:(Section \ref{eki:sect-eki})`.
- The definition of regions of interest to select relevant volumes in the scene 
  (see :ref:`sect-roi`:latex:`, Section \ref{roi:sect-roi}`).
- A load carrier detection functionality for bin-picking applications 
  (see :ref:`sect-loadcarrier`:latex:`, Section \ref{loadcarrier:sect-loadcarrier}`),
  to provide grasps for objects inside a bin only.
- The definition of compartments inside a load carrier to provide grasps
  for specific volumes of the bin only.
- The definition of grasp points for each template via an interactive visualization in the |webgui|
- Support for static and robot-mounted cameras and.
  optional integration with the :doc:`handeye_calibration`
  :latex:`(Section \ref{handeye_calibration:sect-handeye-calibration})` component,
  to provide grasps in the user-configured external reference frame.
- Sorting of grasps according to reachability so that the ones which are closest to the 
  camera along the z axis of the preferred orientation of the TCP are returned first.

.. _sect-cadmatch-grasps:

Setting of grasp points
-----------------------

.. index::
   single: CADMatch; grasp points
   single: CADMatch; object template

The |cadm| component detects 3D objects in a scene based on a CAD template and returns the
poses of the object origins. To use |cadm| directly in a robot application, grasp points
can be defined for each template. A grasp point represents the desired position and orientation
of the robot's TCP (Tool Center Point) to grasp an object as shown in
:numref:`fig-cadmatch-grasp-points`

.. _fig-cadmatch-grasp-points:
.. figure:: images/grasp_points.*
   :width: 50%
   :align: center

   Definition of grasp points with respect to the robot's TCP

Each grasp consists of an ``id`` which must be
unique within all grasps for an object template, the ``template_id`` representing the template the grasp
should be attached to, and the ``pose`` in the coordinate frame of the object template.
Grasp points can be set via the :doc:`rest_api`:latex:`\:(Section \ref{rest_api:sect-rest-api})`,
or by using the interactive visualization in the |webgui|. The |rcxxx| can store up to 50 grasp
points per template.

Setting grasp points in the |webgui|
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The |rc_xxx| |webgui| provides an intuitive and interactive way of defining grasp points for object templates.
In a first step, the object template has to be uploaded to the |rc_xxx|. This can be done on the *CADMatch* page
in the *Modules* tab of the |webgui| by clicking on *add new Template* in the *Templates and Grasps* section of the *CADMatch* page. Once the
template upload is complete, a dialog with a 3D visualization of the object for adding or editing grasp
points is shown. The same dialog appears when editing an existing template.

This dialog provides two ways for setting grasp points:

1. **Adding grasps manually**:
   By clicking on the *+* symbol, a new grasp is placed in the object origin. The
   grasp can be given a unique name which corresponds to its ID.
   The desired pose of the grasp can be entered in the fields for *Position* and *Roll/Pitch/Yaw* which are given
   in the coordinate frame of the object template represented by the long x, y and z axes in the visualization.
   The grasp point can be placed freely with respect to the object template - inside, outside or on the surface.
   The grasp point and its orientation are visualized in 3D for verification.

2. **Adding grasps interactively**:
   Grasp points can be added interactively by first clicking on the *Add Grasp* button
   in the upper left corner of the visualization and then clicking on the desired point on the object template visualization. The
   grasp is attached to the object surface. The grasp orientation is a right-handed coordinate system and
   is chosen such that its z axis is normal to the surface pointing inside the object at
   the grasp position. The position and orientation in the object coordinate frame is displayed on the right.
   The position and orientation of the grasp can also be changed interactively. 
   In case *Snap to surface* is enabled in the visualization (default), the grasp can be moved along the object
   surface by clicking on the *Translate* button in the visualization and then clicking on the grasp point and dragging
   it to the desired position. The orientation of the grasp around the surface normal can also be changed by choosing
   *Rotate* and then rotating the grasp with the cursor.
   In case *Snap to surface* is disabled, the grasp can be translated and rotated freely in all three dimensions.

If the object template has symmetries, the grasps which are symmetric to the defined grasps can be displayed by clicking on
*Show symmetric grasps*.

Setting grasp points via the |rest-api|
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Grasp points can be set via the :doc:`rest_api`:latex:`\:(Section \ref{rest_api:sect-rest-api})`
using the ``set_grasp`` or ``set_all_grasps`` service calls
(see :ref:`sect-cadmatch-services`:latex:`, Section \ref{cadmatch:sect-cadmatch-services}`).
In the |cadm| component a grasp consists of the ``template_id`` of the template
the grasp should be attached to, an ``id`` uniquely identifying the grasp point and
the ``pose`` with ``position`` in meters and ``orientation`` as quaternion in the coordinate frame of
the object template.

.. _sect-cadmatch-set-preferred-orientation:

Setting the preferred orientation of the TCP
--------------------------------------------

.. index::
   single: CADMatch; preferred orientation

The |cadm| component determines the reachability of grasp points based on the *preferred orientation* of the
gripper or TCP. The preferred orientation can be set via the ``set_preferred_orientation`` service call or on
the *CADMatch* page in the |webgui|.
The resulting direction of the TCP's z axis is used to reject grasps which cannot be reached by the gripper.
Furthermore, it is used to sort the reachable grasps such that the closest grasps to the camera along the Z 
axis of the preferred orientation of the TCP are returned first.

The preferred orientation can be set in the camera coordinate frame or in the external coordinate frame, in case
a hand-eye calibration is available. If the preferred orientation is specified in the external coordinate frame
and the sensor is robot mounted, the current robot pose has to be given to each object detection call, so that the
preferred orientation can be used for filtering and sorting the grasps on the detected objects.
If no preferred orientation is set, the z axis of the left camera is used as the preferred orientation of the TCP.


.. _sect-cadmatch-detect-objects:

Detection of objects
--------------------

.. index::
   single: CADMatch; object detection
   single: CADMatch; object template

The |cadm| component requires an object template for object detection. This template contains
information about the 3D shape of the object and prominent edges that can be visible in the
camera images.

The object detection is a two-stage process consisting of a prior estimation step and a pose refinement step.
First, a pose prior is computed based on the appearance
of the object in the camera images. Second, the pose is refined by using the 3D point cloud and
edges in the camera image. For this to work, the objects to detect must be visible in both left and right camera images.

For triggering the object detection, in general, the following information
must be provided to the |cadm| component:

- The template ID of the object to be detected in the scene.
- The coordinate frame in which the poses of the detected objects and the grasp points shall be returned
  (ref. :ref:`sect-cadmatch-hand-eye-dep`:latex:`, Section \ref{cadmatch:sect-cadmatch-hand-eye-dep}`).

Optionally, further information can be given to the |cadm| component:

- The ID of the load carrier which contains the items to be detected.
- A compartment inside the load carrier where to detect objects (as in ItemPick's :ref:`sect-itempick-compute-grasps`:latex:`, Section \ref{itempick:sect-itempick-compute-grasps}`).
- The ID of the region of interest where to search for the load carriers if a
  load carrier is set.
  Otherwise, the ID of the region of interest where to search for the objects.
- The current robot pose in case the camera is mounted on the robot and 
  the chosen coordinate frame for the poses is ``external``, or the preferred orientation
  is given in the external frame, or the chosen region of interest is defined in the external frame.
- Collision detection information: The ID of the gripper to enable collision checking and optionally
  a pre-grasp offset to define a pre-grasp position.
  The collision check requires a separate CollisionCheck :ref:`license<sect-updating-license>`
  :latex:`(Section \ref{maintenance:sect-updating-license})` to be purchased. Details on collision
  checking are given below in :ref:`sect-cadmatch-collision-check-dep`:latex:`\:(Section \ref{cadmatch:sect-cadmatch-collision-check-dep})`.

On the |webgui| the detection can be tested in the *Try Out* section of the |cadm| component's page.

The detected objects are returned in a list of ``matches``. Each detected object
includes a ``uuid`` (Universally Unique Identifier) and the
``timestamp`` of the oldest image that was used to detect it.
The ``pose`` of a detected object corresponds to the pose of the origin of the object template used for detection.
Furthermore, the matching ``score`` is given to indicate the quality of the detection.

If the chosen template also has grasp points attached
(see :ref:`sect-cadmatch-grasps`:latex:`, Section \ref{cadmatch:sect-cadmatch-grasps}`),
a list of ``grasps`` for all objects sorted by their reachability
(see :ref:`sect-cadmatch-set-preferred-orientation`:latex:`, Section \ref{cadmatch:sect-cadmatch-set-preferred-orientation}`)
is returned in addition to the list of detected objects.
The grasp poses are given in the desired coordinate frame. There are references between the detected objects
and the grasps via their ``uuids``.

.. Note::
  The first detection call with a new object template takes longer than the following detection calls, 
  because the object template has to be loaded into the |cadm| component first.

.. _sect-cadmatch-dependencies:

Interaction with other components
---------------------------------

Internally, the |cadm| component depends on, and interacts with other on-board
components as listed below.

.. Note::
  All changes and configuration updates to these components will affect
  the performance of the |cadm| components.


.. _sect-cadmatch-stereo-camera-matching:

Stereo camera and Stereo matching
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The |cadm| component makes internally use of the following data:

- Rectified images from the :doc:`stereo_camera` component
  (``rc_stereocamera``:latex:`, Section \ref{stereo_camera:sect-stereo-camera}`);

- Disparity, error, and confidence images from the :doc:`stereo_matching` component
  (``rc_stereomatching``:latex:`, Section \ref{stereo_matching:sect-stereo-matching}`).

The ``quality`` parameter of the stereo matching component must be set to ``Medium``
or higher (see :ref:`sect-disp-image-parameters`:latex:`, Section \ref{stereo_matching:sect-disp-image-parameters}`). We recommend ``Full`` or ``High`` quality for using |cadm|.

All processed images are guaranteed to be captured after the component trigger time.

.. _sect-cadmatch-dynamics:

Estimation of gravity vector
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

For each load carrier detection or object detection inside a load carrier, the component
estimates the gravity vector by subscribing to the |rc_visard|'s IMU data stream.

.. Note::
   The gravity vector is estimated from linear acceleration readings from the on-board IMU.
   For this reason, the |cadm| component requires the |rc_visard| to remain
   still while the gravity vector is being estimated.

.. _sect-cadmatch-iocontrol-dep:

IO and Projector Control
^^^^^^^^^^^^^^^^^^^^^^^^

In case the |rc_xxx| is used in conjunction with an external random dot projector and
the :doc:`iocontrol` component (``rc_iocontrol``:latex:`, Section \ref{iocontrol:sect-iocontrol}`),
it is recommended to connect the projector to GPIO Out 1 and set
the stereo-camera component's acquisition mode to ``SingleFrameOut1``
(see :ref:`Stereo matching parameters<sect-disp-image-parameters>`:latex:`, Section \ref{stereo_matching:sect-disp-image-parameters}`), so that
on each image acquisition trigger an image with and without projector pattern is acquired.

Alternatively, the output mode for the GPIO output in use should be set to ``ExposureAlternateActive``
(see :ref:`sect-iocontrol-params`:latex:`, Section \ref{iocontrol:sect-iocontrol-params}`).

In either case,
the *Auto Exposure Mode* ``exp_auto_mode`` should be set to ``AdaptiveOut1`` to optimize the exposure
of both images (see :ref:`Stereo camera parameters<sect-cam-params>`:latex:`, Section \ref{stereo_camera:sect-cam-params}`).

.. _sect-cadmatch-hand-eye-dep:

Hand-eye calibration
^^^^^^^^^^^^^^^^^^^^

In case the camera has been calibrated to a robot, the |cadm| component
can automatically provide poses in the robot coordinate frame.
For the |cadm| node's :ref:`sect-cadmatch-services`:latex:`\:(Section \ref{cadmatch:sect-cadmatch-services})`, the frame of the
output poses can be controlled with the ``pose_frame`` argument.

Two different ``pose_frame`` values can be chosen:

1. **Camera frame** (``camera``).
   All poses provided by the components are in the camera frame,
   and no prior knowledge about the pose of the camera in the environment is required.
   This means that the configured regions of interest and load carriers move with the camera.
   It is the user's responsibility to update the configured poses
   if the camera frame moves (e.g. with a robot-mounted camera).

2. **External frame** (``external``).
   All poses provided by the components are in the external frame,
   configured by the user during the hand-eye calibration process.
   The component relies on the on-board
   :doc:`Hand-eye calibration component<handeye_calibration>`:latex:`\:(Section \ref{handeye_calibration:sect-handeye-calibration})`
   to retrieve the sensor mounting (static or robot mounted) and
   the hand-eye transformation.
   If the mounting is static, no further information is needed.
   If the sensor is robot-mounted, the ``robot_pose`` is required
   to transform poses to and from the ``external`` frame.

.. Note::
   If no hand-eye calibration is available, all ``pose_frame`` values should be set to ``camera``.

All ``pose_frame`` values that are not ``camera`` or ``external`` are rejected.


.. _sect-cadmatch-collision-check-dep:

CollisionCheck
^^^^^^^^^^^^^^

.. index::
   single: CADMatch; collision check

In case a CollisionCheck license is available, the collision checking can be easily enabled for
grasp computation of the |cadm| component by passing the ID of the used gripper and
optionally a pre-grasp offset to the 
``detect_object`` service call. The gripper has to be
defined in the CollisionCheck component
(see :ref:`sect-collisioncheck-gripper`:latex:`\:(Section \ref{collisioncheck:sect-collisioncheck-gripper})`)
and details about collision checking are given in :ref:`sect-collision-check-other-modules`:latex:`\:(Section \ref{collisioncheck:sect-collision-check-other-modules})`.

If collision checking is enabled, only grasps which are collision free will be returned. 
However, the result image on top of the *CADMatch*
tab of the |webgui| also shows colliding grasp points in red.

The CollisionCheck module's run-time parameters affect the collision detection as described in
:ref:`CollisionCheck Parameters<sect-collisioncheck-parameters>`:latex:`\:(Section \ref{collisioncheck:sect-collisioncheck-parameters})`.

.. _sect-cadmatch-parameters:

Parameters
----------

.. index::
   single: CADMatch; parameters

The |cadm| component is called ``rc_cadmatch``
in the |rest-api| and is represented by the *CADMatch* page in the *Modules* tab of the
:ref:`Web GUI<sect-web-gui>`:latex:`\:(Section \ref{installation:sect-web-gui})`.
The user can explore and configure the ``rc_cadmatch``
component's run-time parameters, e.g. for development and testing, using the |webgui| or the
:doc:`rest_api`:latex:`\:(Section \ref{rest_api:sect-rest-api})`.

Parameter overview
^^^^^^^^^^^^^^^^^^

.. include:: _gen/nodes/params/rc_cadmatch.txt

Description of run-time parameters
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Each run-time parameter is represented by a row on the |webgui|'s *CADMatch* page in the *Modules* tab.
The name in the |webgui| is given in brackets behind the parameter name and the parameters are
listed in the order they appear in the |webgui|:

``max_matches`` (*Maximum Matches*)
    is the maximum number of objects to detect.

``min_score`` (*Minimum Score*)
    is the minimum detection score after refinement. The higher this value, the better 2D edges and 3D point cloud must match the given template.

``load_carrier_model_tolerance`` (*Model Tolerance*)
    see :ref:`Parameters of the load carrier functionality<sect-loadcarrier-parameters>`:latex:`\:(Section \ref{loadcarrier:sect-loadcarrier-parameters})`.

``load_carrier_crop_distance`` (*Crop Distance*)
    see :ref:`Parameters of the load carrier functionality<sect-loadcarrier-parameters>`:latex:`\:(Section \ref{loadcarrier:sect-loadcarrier-parameters})`.

``edge_sensitivity`` (*Edge Sensitivity*)
    is the sensitivity of the edge detector. The higher the value of this parameter, the more edges will be used for pose refinement.

``edge_max_distance`` (*Maximum Edge Distance*)
    is the maximum allowed distance in pixels between the template edges and the detected edges in the image during the refinement step.

.. _sect-cadmatch-status-values:

Status values
-------------

.. index::
   single: CADMatch; status

The ``rc_cadmatch`` component reports the following status values:

.. tabularcolumns:: |l|L|
.. csv-table:: The ``rc_cadmatch`` component's status values
	:header:  Name, Description


	"``data_acquisition_time``","Time in seconds required by the last active service to acquire images"
	"``last_timestamp_processed``","The timestamp of the last processed dataset"
	"``load_carrier_detection_time``","Processing time of the last load carrier detection in seconds"
        "``object_detection_time``","Processing time of the last last object detection in seconds"
	"``state``","The current state of the rc_cadmatch node"

The reported ``state`` can take one of the following values.

.. tabularcolumns:: |l|l|
.. _tab-cadmatch-states:
.. csv-table:: Possible states of the CADMatch component
	:header:  State name, Description

	"IDLE", "The component is idle."
	"RUNNING", "The component is running and ready for load carrier detection and object detection."
	"FATAL", "A fatal error has occurred."

.. _sect-cadmatch-services:

Services
--------

.. index::
   single: CADMatch; services

The user can explore and call the ``rc_cadmatch`` component's services,
e.g. for development and testing, using the
:doc:`rest_api`:latex:`\:(Section \ref{rest_api:sect-rest-api})` or
the |rc_xxx|
:ref:`sect-web-gui`:latex:`\:(Section \ref{installation:sect-web-gui})`.

Each service response contains a ``return_code``,
which consists of a ``value`` plus an optional ``message``.
A successful service returns with a ``return_code`` value of ``0``.
Negative ``return_code`` values indicate that the service failed.
Positive ``return_code`` values indicate that the service succeeded with additional information.
The smaller value is selected in case a service has multiple ``return_code`` values,
but all messages are appended in the ``return_code`` message.

The following table contains a list of common codes:

.. tabularcolumns:: |c|L|
.. _tab-cadmatch-return-codes:
.. csv-table:: Return codes of the CADMatch services
    :header:  Code, Description

    "0",    "Success"
    "-1",   "An invalid argument was provided"
    "-2",   "An internal error occurred"
    "-3",   "An internal time-out occurred"
    "-4",   "Data acquisition took longer than the maximum allowed time of 5.0 seconds"
    "-8",   "Not applicable, stereo quality must be at least Medium"
    "-9",   "No valid license for the module"
    "-10",  "New element could not be added as the maximum storage capacity of load carriers or regions of interest has been exceeded"
    "10",   "The maximum storage capacity of load carriers or regions of interest has been reached"
    "11",   "Existing data was overwritten"
    "100",  "The requested load carrier was not detected in the scene"
    "101",  "None of the detected grasps is reachable"
    "102",  "The detected load carrier is empty"
    "103",  "All detected grasps are in collision with the load carrier"
    "151",  "The object template has a continuous symmetry"
    "999",  "Additional hints for application development"

The |cadm| components offer the following services.

.. _expl-cadmatch-srv-start:

``start``
^^^^^^^^^

   Starts the component. If the command is accepted, the component moves to state ``RUNNING``.
   The ``current_state`` value in the service response may differ from ``RUNNING`` if
   the state transition is still in process when the service returns.

   .. include:: _gen/nodes/services/rc_cadmatch_start.txt

.. _expl-cadmatch-srv-stop:

``stop``
^^^^^^^^

   Stops the component. If the command is accepted, the component moves to state ``IDLE``.
   The ``current_state`` value in the service response may differ from ``IDLE`` if
   the state transition is still in process when the service returns.

   .. include:: _gen/nodes/services/rc_cadmatch_stop.txt

.. _expl-cadmatch-srv-set-roi:

``set_region_of_interest``
^^^^^^^^^^^^^^^^^^^^^^^^^^

   see :ref:`expl-roi-srv-set-roi`:latex:`\:(Section \ref{roi:expl-roi-srv-set-roi})`.

.. _expl-cadmatch-srv-get-roi:

``get_regions_of_interest``
^^^^^^^^^^^^^^^^^^^^^^^^^^^

   see :ref:`expl-roi-srv-get-roi`:latex:`\:(Section \ref{roi:expl-roi-srv-get-roi})`.

.. _expl-cadmatch-srv-delete-roi:

``delete_regions_of_interest``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  see :ref:`expl-roi-srv-delete-roi`:latex:`\:(Section \ref{roi:expl-roi-srv-delete-roi})`.

.. _expl-cadmatch-srv-set-lc:

``set_load_carrier``
^^^^^^^^^^^^^^^^^^^^

   see :ref:`expl-loadcarrier-srv-set-lc`:latex:`\:(Section \ref{loadcarrier:expl-loadcarrier-srv-set-lc})`.
   
.. _expl-cadmatch-srv-get-lc:

``get_load_carriers``
^^^^^^^^^^^^^^^^^^^^^

   see :ref:`expl-loadcarrier-srv-get-lc`:latex:`\:(Section \ref{loadcarrier:expl-loadcarrier-srv-get-lc})`.

.. _expl-cadmatch-srv-delete-lc:

``delete_load_carriers``
^^^^^^^^^^^^^^^^^^^^^^^^

   see :ref:`expl-loadcarrier-srv-delete-lc`:latex:`\:(Section \ref{loadcarrier:expl-loadcarrier-srv-delete-lc})`.

.. _expl-cadmatch-srv-detect-lc:

``detect_load_carriers``
^^^^^^^^^^^^^^^^^^^^^^^^

   see :ref:`expl-loadcarrier-srv-detect-lc`:latex:`\:(Section \ref{loadcarrier:expl-loadcarrier-srv-detect-lc})`.


.. _expl-cadmatch-srv-detect-filling-level:

``detect_filling_level``
^^^^^^^^^^^^^^^^^^^^^^^^

   see :ref:`expl-loadcarrier-srv-detect-filling-level`:latex:`\:(Section \ref{loadcarrier:expl-loadcarrier-srv-detect-filling-level})`.

.. _expl-cadmatch-srv-set-preferred-orientation:

``set_preferred_orientation``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

   Persistently stores the preferred orientation of the gripper to compute the reachability of the grasps,
   which is used for filtering and sorting the grasps returned by the ``detect_object`` service
   (see :ref:`sect-cadmatch-set-preferred-orientation`:latex:`, Section \ref{cadmatch:sect-cadmatch-set-preferred-orientation}`).

   .. include:: _gen/nodes/services/rc_cadmatch_set_preferred_orientation.txt

.. _expl-cadmatch-srv-get-preferred-orientation:

``get_preferred_orientation``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

   Returns the preferred orientation of the gripper to compute the reachability of the grasps,
   which is used for filtering and sorting the grasps returned by the ``detect_object`` service
   (see :ref:`sect-cadmatch-set-preferred-orientation`:latex:`, Section \ref{cadmatch:sect-cadmatch-set-preferred-orientation}`).

   .. include:: _gen/nodes/services/rc_cadmatch_get_preferred_orientation.txt

.. _expl-cadmatch-srv-set-grasp:

``set_grasp``
^^^^^^^^^^^^^^^^^^^^

   Persistently stores a grasp for the given object template on the |rc_xxx|.
   All configured grasps are persistent over firmware updates and rollbacks.

   .. include:: _gen/nodes/services/rc_cadmatch_set_grasp.txt

   Details for the definition of the ``grasp`` type are given in
   :ref:`sect-cadmatch-grasps`:latex:`\:(Section \ref{cadmatch:sect-cadmatch-grasps})`.


.. _expl-cadmatch-srv-set-all-grasps:

``set_all_grasps``
^^^^^^^^^^^^^^^^^^^^

   Replaces the list of grasps for the given object template on the |rc_xxx|.

   .. include:: _gen/nodes/services/rc_cadmatch_set_all_grasps.txt

   Details for the definition of the ``grasp`` type are given in
   :ref:`sect-cadmatch-grasps`:latex:`\:(Section \ref{cadmatch:sect-cadmatch-grasps})`.

.. _expl-cadmatch-srv-get-grasps:

``get_grasps``
^^^^^^^^^^^^^^^^^^^^^

   Returns all configured grasps which have the requested ``grasp_ids`` and belong to the requested ``template_ids``.
   If no ``grasp_ids`` are provided, all grasps belonging to the requested ``template_ids`` are returned.
   If no ``template_ids`` are provided, all grasps with the requested ``grasp_ids`` are returned.
   If neither IDs are provided, all configured grasps are returned.

   .. include:: _gen/nodes/services/rc_cadmatch_get_grasps.txt

.. _expl-cadmatch-srv-delete-grasps:

``delete_grasps``
^^^^^^^^^^^^^^^^^^^^^^^^

   Deletes all grasps with the requested ``grasp_ids`` that belong to the requested ``template_ids``.
   If no ``grasp_ids`` are provided, all grasps belonging to the requested ``template_ids`` are deleted.
   The ``template_ids`` list must not be empty.

   .. include:: _gen/nodes/services/rc_cadmatch_delete_grasps.txt

.. _expl-cadmatch-srv-get-symmetric-grasps:

``get_symmetric_grasps``
^^^^^^^^^^^^^^^^^^^^^^^^

   Returns all grasps that are symmetric to the given grasp.
   The first grasp in the returned list is the one that was passed with the service call.
   If the object template does not have an exact symmetry, only the grasp passed with the
   service call will be returned. If the object template has a continuous symmetry (e.g. a
   cylindrical object), only 12 equally spaced sample grasps will be returned.

   .. include:: _gen/nodes/services/rc_cadmatch_get_symmetric_grasps.txt

   Details for the definition of the ``grasp`` type are given in
   :ref:`sect-cadmatch-grasps`:latex:`\:(Section \ref{cadmatch:sect-cadmatch-grasps})`.

.. _expl-cadmatch-srv-detect-object:

``detect_object``
^^^^^^^^^^^^^^^^^

   Triggers the detection of objects as described in
   :ref:`sect-cadmatch-detect-objects`:latex:`\:(Section \ref{cadmatch:sect-cadmatch-detect-objects})`
   based on an object template.

   **Request:**

    .. include:: _gen/nodes/services/rc_cadmatch_detect_object_request.txt

    Required arguments:

      ``pose_frame``: see :ref:`sect-cadmatch-hand-eye-dep`:latex:`\:(Section \ref{cadmatch:sect-cadmatch-hand-eye-dep})`.

      ``template_id``: the ID of the template to be detected.

    Potentially required arguments:

      ``robot_pose``: see :ref:`sect-cadmatch-hand-eye-dep`:latex:`\:(Section \ref{cadmatch:sect-cadmatch-hand-eye-dep})`.

    Optional arguments:

      ``load_carrier_id``: ID of the load carrier which contains the items to be detected.

      ``load_carrier_compartment``: compartment inside the load carrier where to detect items.

      ``region_of_interest_id``: if ``load_carrier_id`` is set,
      ID of the region of interest where to search for the load carriers.
      Otherwise, ID of the region of interest where to search for the objects.

      ``collision_detection``: see :ref:`sect-collision-check-other-modules`:latex:`\:(Section \ref{collisioncheck:sect-collision-check-other-modules})`.
      The collision check requires a separate CollisionCheck :ref:`license<sect-updating-license>`:latex:`\:(Section \ref{maintenance:sect-updating-license})` to be purchased.

   **Response:**

    .. include:: _gen/nodes/services/rc_cadmatch_detect_object_response.txt

    ``grasps``: list of grasps on the detected objects. The grasps are ordered by their reachability starting with the grasp that
    can be reached most easily by the robot. The ``match_uuid`` gives the reference to the detected object in ``matches``
    this grasp belongs to.

    ``load_carriers``: list of detected load carriers.

    ``matches``: list of detected objects matching the template. The ``score`` indicates how well the object matches the template. The
    ``grasp_uuids`` refer to the grasps in ``grasps`` which are reachable on this object.

    ``timestamp``: timestamp of the image set the detection ran on.

    ``return_code``: holds possible warnings or error codes and messages.


.. _expl-cadmatch-srv-save-params:

``save_parameters``
^^^^^^^^^^^^^^^^^^^

   This service saves the currently set parameters persistently.
   Thereby, the same parameters will still apply after a reboot of
   the |rc_xxx|.
   The node parameters are not persistent over firmware updates and rollbacks.

   .. include:: _gen/nodes/services/rc_cadmatch_save_parameters.txt

.. _expl-cadmatch-srv-reset-params:

``reset_defaults``
^^^^^^^^^^^^^^^^^^

   This service resets all parameters of the component to its default values,
   as listed in above table.
   The reset does not apply to regions of interest and load carriers.

   .. include:: _gen/nodes/services/rc_cadmatch_reset_defaults.txt

Template Upload
---------------

.. index::
  single: CADMatch; template api

For template upload, download and listing, special |rest-api| endpoints are provided.
Up to 30 templates can be stored persistently on the |rc_xxx|.

.. only:: rc_cube

   .. include:: _gen/swagger/rc_cube/templates_cadmatch.txt


